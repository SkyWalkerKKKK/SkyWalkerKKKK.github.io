<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC</title>
      <link href="/Java/JDBC/"/>
      <url>/Java/JDBC/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><ul><li><p>概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库。</p></li><li><p>JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p></li><li><p>JDBC底层使用了网络编程技术，将Java代码中的SQL代码发送给服务器的数据库，执行完再返回结果给Java代码。</p></li><li><p>使用JDBC的准备</p><ul><li>因为底层是网络编程技术，所以网络三要素（IP，协议，端口）都要指明。</li><li>还要指明使用哪个数据库、用户名、密码。</li></ul></li><li><p>快速入门：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line"><span class="number">1</span>. 导入驱动jar包 mysql-connector-java-<span class="number">5.1</span>.37-bin.jar</span><br><span class="line"><span class="number">1</span>.复制mysql-connector-java-<span class="number">5.1</span>.37-bin.jar到项目的libs目录下</span><br><span class="line"><span class="number">2</span>.右键--&gt;Add As Library</span><br><span class="line"><span class="number">2</span>. 注册驱动</span><br><span class="line"><span class="number">3</span>. 获取数据库连接对象 Connection</span><br><span class="line"><span class="number">4</span>. 定义sql</span><br><span class="line"><span class="number">5</span>. 获取执行sql语句的对象 Statement</span><br><span class="line"><span class="number">6</span>. 执行sql，接受返回结果</span><br><span class="line"><span class="number">7</span>. 处理结果</span><br><span class="line"><span class="number">8</span>. 释放资源</span><br><span class="line"></span><br><span class="line">代码实现：</span><br><span class="line">  <span class="comment">//1.导入驱动jar包</span></span><br><span class="line">        <span class="comment">//2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        <span class="comment">//3.获取数据库连接对象</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db3"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">//4.定义sql语句</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 500 where id = 1"</span>;</span><br><span class="line">        <span class="comment">//5.获取执行sql的对象 Statement</span></span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//6.执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h2><ul><li><p>功能</p><ol><li><p>注册驱动：告诉程序该使用哪一个数据库驱动jar</p><ul><li><p>static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 </p></li><li><p>写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);</p></li><li><p>通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块。</p><p>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mysql.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">extends</span> <span class="title">NonRegisteringDriver</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">sql</span>.<span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><ol start="2"><li><p>获取数据库连接：</p><ul><li>方法：static Connection getConnection(String url, String user, String password)</li><li>参数：<ol><li>url：指定连接的路径<ul><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>例子：jdbc:mysql://localhost:3306/student</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li><li><span style="color:red;">可以在URL后面拼接?characterEncoding=utf8来指定使用UTF-8编码处理数据</span></li></ul></li><li>user：用户名</li><li>password：密码 </li></ol></li></ul></li></ol><p><span style="color:red;font-size:25px">两种注册驱动的方式（面试题）：</span></p><p>1、Class.forName(“com.mysql.jdbc.Driver”);</p><p>2、DriverManager.registerDriver(new Driver());</p><p><strong><em><span style="color:red">两者的区别：</span></em></strong></p><p>方式一只会注册一次驱动，触发Driver类中的静态代码块执行。</p><p>而方式二会注册两次驱动。在内存中生成两个不同的Driver对象。</p><p><span style="color:red">注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</span></p><h2 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h2><ul><li>功能：<ol><li>获取执行sql 的对象<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)  </li></ul></li><li>管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit() </li><li>回滚事务：rollback() </li></ul></li></ol></li></ul><h2 id="Statement：执行sql的对象"><a href="#Statement：执行sql的对象" class="headerlink" title="Statement：执行sql的对象"></a>Statement：执行sql的对象</h2><ul><li><p>功能</p><ul><li><p>执行sql</p><ul><li><p>boolean execute(String sql) ：可以执行任意的sql</p><p>返回值：<span style="color:red">如果第一个结果为 ResultSet 对象，则返回 true；如果其为更新计数或者不存在任何结果，则返回 false  </span></p></li><li><p>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句</p><p>返回值：</p><p>(1) 对于 SQL 数据操作语言 (DML) 语句，返回行计数</p><p> (2) 对于什么都不返回的 SQL 语句，返回 0 </p></li><li><p>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</p><p>返回值：包含给定查询所生成数据的 ResultSet 对象；永远不能为 null </p></li></ul></li></ul></li></ul><h2 id="ResultSet：结果集对象-封装查询结果"><a href="#ResultSet：结果集对象-封装查询结果" class="headerlink" title="ResultSet：结果集对象,封装查询结果"></a>ResultSet：结果集对象,封装查询结果</h2><ul><li><p>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</p></li><li><p>getXxx(参数):获取数据</p><ul><li>Xxx：代表数据类型   如： int getInt() ,    String getString()</li><li>参数：<ol><li>int：代表列的编号,从1开始   如： getString(1)</li><li>String：代表列名称。 如： getDouble(“balance”)</li></ol></li></ul></li><li><p>使用步骤（注意）：</p><ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循环判断游标是否是最后一行末尾。</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="comment">//6.2 获取数据</span></span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">    <span class="keyword">double</span> balance = rs.getDouble(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="PreparedStatement：执行sql的对象"><a href="#PreparedStatement：执行sql的对象" class="headerlink" title="PreparedStatement：执行sql的对象"></a>PreparedStatement：执行sql的对象</h2><ul><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ul><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’ </li></ul></li><li>解决sql注入问题：使用PreparedStatement对象来解决</li><li>预编译的SQL：参数使用?作为占位符</li><li>步骤：<ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </li><li>给？赋值：<ul><li>方法：setXxx(参数1,参数2)<ul><li><span style="color:red">参数1：？的位置编号 从1 开始</span></li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：后期都会使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ul><h1 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h1><ul><li><p>目的：简化书写</p></li><li><p>分析：</p><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ul><li><p>需求：不想传递参数（麻烦），还得保证工具类的通用性。</p></li><li><p>解决：配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#文件名：jdbc.properties</span><br><span class="line">#以连接MySQL数据库中的skywalker库为例，内容如下：</span><br><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/skywalker</span><br><span class="line">#如果连接的是本机MySQL服务器，url可以简写为url=jdbc:mysql:///skywalker</span><br><span class="line">user=root</span><br><span class="line">password=123</span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽取一个方法释放资源</p></li><li><p>JDBCUtils代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SkyWalker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 - 07 - 28 - 9:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver; <span class="comment">// driver</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url; <span class="comment">// url</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user; <span class="comment">// user</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password; <span class="comment">// password</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从配置文件中读取数据库配置信息</span></span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>));</span><br><span class="line">            driver = prop.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            url = prop.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = prop.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, PreparedStatement ps, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="JDBC控制事务"><a href="#JDBC控制事务" class="headerlink" title="JDBC控制事务"></a>JDBC控制事务</h1><ul><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务。</li><li>完成后，提交事务。</li><li>如果发生异常，则回滚事务。</li></ol></li><li><p>使用Connection对象来管理事务</p><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li><li><p>案例：jack给skywalker转账500元的事务，对比数据库中的数据进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SkyWalker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 - 07 - 28 - 17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String sql1 = <span class="string">"update account set balance = balance - ? where `name` = ?"</span>;</span><br><span class="line">            String sql2 = <span class="string">"update account set balance = balance + ? where `name` = ?"</span>;</span><br><span class="line">            ps1 = conn.prepareStatement(sql1);</span><br><span class="line">            ps2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">// jack 给 skywalker 转账500</span></span><br><span class="line">            ps1.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            ps1.setString(<span class="number">2</span>, <span class="string">"jack"</span>);</span><br><span class="line">            ps2.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            ps2.setString(<span class="number">2</span>, <span class="string">"skywalker"</span>);</span><br><span class="line">            <span class="comment">//开始执行事务的操作</span></span><br><span class="line">            ps1.executeUpdate();</span><br><span class="line">            <span class="comment">//手动制造了一个异常，若不进行回滚操作，则数据库中的数据会发生问题。事务的一致性无法保持。</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">            ps2.executeUpdate();</span><br><span class="line">            <span class="comment">//事务完成后，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//事务未完成，回滚事务</span></span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.release(conn, ps1, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (ps2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ps2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><ul><li><p>概念：其实就是一个容器（集合），存放数据库连接的容器。</p><p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p></li><li><p>好处：</p><ol><li>节约资源</li><li>用户访问高效</li><li>方便对连接进行统一管理</li></ol></li><li><p>连接池的实现：</p><ol><li>标准接口：DataSource   javax.sql包下的<ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li><li>一般我们不去实现它，有数据库厂商来实现</li></ol></li><li><p>分类：</p><ul><li>C3P0<ol><li>导包</li><li>定义配置文件<ul><li>可以是properties形式的，也可以是xml形式的</li><li>需要将配置文件放在src下</li></ul></li><li>创建核心对象，数据库连接池对象 ComboPooledDataSource</li><li>调用getConnction()方法获取连接</li></ol></li><li>Druid<ol><li>导包</li><li>定义配置文件<ul><li>是properties形式的</li><li>可以叫任意名称</li><li>可以放在任意目录下</li></ul></li><li>手动加载配置文件</li><li>获取数据库连接池对象：通过工厂类来获取 DruidDataSourceFactory</li><li>调用getConnction()方法获取连接</li></ol></li></ul></li></ul><h1 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h1><ul><li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发。</p></li><li><p>步骤：</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><p><code>JdbcTemplate template = new JdbcTemplate(ds);</code></p></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper</li><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></li></ul><ul><li><p>对于Spring JDBC的练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.skywalker.Druid.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.skywalker.domain.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SkyWalker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 - 07 - 30 - 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将编号为1011的工资更新为7500</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"update emp set salary = ? where id = ?"</span>, <span class="number">7500</span>, <span class="number">1011</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"insert into emp(id,ename,dept_id) values (?,?,?)"</span>, <span class="number">1015</span>, <span class="string">"张飞"</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除刚才的记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        template.update(<span class="string">"delete from emp where id = ?"</span>, <span class="number">1015</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">     * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(<span class="string">"select * from emp where id = ?"</span>, <span class="number">1001</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(<span class="string">"select * from emp"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; map : list) &#123;</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Employee&gt; emplist = template.query(<span class="string">"select * from emp"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class));</span><br><span class="line">        <span class="keyword">for</span> (Employee emp : emplist) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer count = template.queryForObject(<span class="string">"select count(*) from emp"</span>, Integer.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 8. 查询id为1008的员工，封装为Emp对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee = template.queryForObject(<span class="string">"select * from emp where id = ?"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Employee&gt;(Employee.class), <span class="number">1008</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/uncategorized/redis/"/>
      <url>/uncategorized/redis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jQuery3.0</title>
      <link href="/uncategorized/jQuery3-0/"/>
      <url>/uncategorized/jQuery3-0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap</title>
      <link href="/uncategorized/BootStrap/"/>
      <url>/uncategorized/BootStrap/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/JavaScript/JavaScript/"/>
      <url>/JavaScript/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><ul><li><p>概念：一门客户端脚本语言</p><ol><li>运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译，直接就可以被浏览器解析执行了</li></ol></li><li><p>功能：可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</p></li></ul><h2 id="JavaScript发展史"><a href="#JavaScript发展史" class="headerlink" title="JavaScript发展史"></a>JavaScript发展史</h2><ol><li>1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C–    ，后来更名为：ScriptEase</li><li>1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</li><li>1996年，微软抄袭JavaScript开发出JScript语言</li><li>1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</li><li>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</li></ol><a id="more"></a><h2 id="ECMAScript：客户端脚本语言的标准"><a href="#ECMAScript：客户端脚本语言的标准" class="headerlink" title="ECMAScript：客户端脚本语言的标准"></a>ECMAScript：客户端脚本语言的标准</h2><ol><li><p>基本语法：</p><ul><li><p>与html结合方式</p><ol><li>内部JS：<ul><li>定义<code>&lt;script&gt;</code>，标签体内容就是js代码</li></ul></li><li>外部JS：<ul><li>定义<code>&lt;script&gt;</code>，通过src属性引入外部的js文件</li></ul></li><li>注意：<ul><li><code>&lt;script&gt;</code>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</li><li><code>&lt;script&gt;</code>可以定义多个。</li></ul></li></ol></li><li><p>注释</p><ol><li>单行注释：<code>//注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ol></li></ul></li></ol><ul><li><p>数据类型：</p><ul><li><p>原始数据类型(基本数据类型)：</p><pre><code>1. number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)    2. string：字符串。 字符串  &quot;abc&quot; &quot;a&quot; &apos;abc&apos;</code></pre><ol start="3"><li>boolean: true和false<ol start="4"><li>null：一个对象为空的占位符</li></ol></li><li><p>undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</p><ul><li><p>引用数据类型：对象</p></li><li><p>变量</p></li><li><p>变量：一小块存储数据的内存空间</p></li><li>Java语言是强类型语言，而JavaScript是弱类型语言。<ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li></ul></li></ul></li></ol><ul><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。<ul><li>语法：<strong>var 变量名 = 初始化值;</strong></li></ul></li></ul></li><li><p>typeof运算符：获取变量的类型。</p><pre><code>- 注：null运算后得到的是object</code></pre><ul><li><p>运算符</p><ol><li><p>一元运算符：只有一个运算数的运算符<br>++，– ， +(正号)<br>++ –: 自增(自减)<br>++(–) 在前，先自增(自减)，再运算<br>++(–) 在后，先运算，再自增(自减)</p><p>+(-)：正负号</p><p>注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</p><p>其他类型转number：</p><ul><li>string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</li></ul></li></ol></li><li><p>boolean转number：true转为1，false转为0</p><ul><li>null转number：0</li></ul></li><li>undefined转number：NaN</li></ul></li></ul><ol start="2"><li><p>算数运算符</p><pre><code>`+ - * / % ...`</code></pre><ol start="3"><li><p>赋值运算符<br><code>= += -+....</code></p></li><li><p>比较运算符<br><code>&gt; &lt; &gt;= &lt;= == ===(全等于)</code><br>比较方式：</p><ul><li>类型相同：直接比较<br> 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</li><li>类型不同：先进行类型转换，再比较<br>===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</li></ul></li></ol></li><li><p>逻辑运算符</p><pre><code>&amp;&amp;   ||    !其他类型转boolean：- number：0或NaN为假，其他为真</code></pre><ul><li>string：除了空字符串(“”)，其他都是true<ul><li>null&amp;undefined:都是false</li><li>对象：所有对象都为true</li></ul></li></ul></li><li><p>三元运算符</p><pre><code>语法：表达式? 值1:值2;判断表达式的值，如果是true则取值1，如果是false则取值2；</code></pre> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码：</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a &gt; b ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="built_in">document</span>.write(c);</span><br><span class="line"> 运行结果：<span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>- 流程控制语句  1. if...else...  2. switch  3. while  4. do...while  5. for- JS特殊语法：  1. 语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)  2. 变量的定义使用var关键字，也可以不使用     - 用： 定义的变量是局部变量- 不用：定义的变量是全局变量(不建议)</code></pre><ol start="2"><li><p>基本对象</p><ol><li>Function：函数(方法)对象</li><li>Array:数组对象</li><li>Boolean<ol start="4"><li>Date：日期对象</li></ol></li><li>Math：数学对象<ol start="6"><li>Number</li></ol></li><li>String</li><li>RegExp：正则表达式对象</li><li>Global</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/Database/MySQL/"/>
      <url>/Database/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><ol><li>数据库的英文单词： DataBase 简称 ： DB</li><li>什么数据库？<ul><li>用于存储和管理数据的仓库。</li></ul></li><li><p>数据库的特点：</p><ul><li><p>持久化存储数据的。其实数据库就是一个文件系统</p></li><li><p>方便存储和管理数据</p></li><li><p>使用了统一的方式操作数据库 – SQL</p><ol start="4"><li>常见的关系型数据库软件</li></ol><ul><li>Oracle</li><li>MySQL</li><li>SQL Server</li><li>DB2</li></ul></li></ul></li></ol><h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><ul><li><p>安装</p><p>如果勾选<span style="color : red"><strong><em>Enable root access from remote machines</em></strong></span>选项，则可以使用root用户进行远程访问本MySQL服务器。（或者以后在mysql数据库下的user表中，自己手动添加一个主机名为’%’的root用户，也可以访问本机MySQL服务器。）</p></li></ul><ul><li><p>卸载</p><p>（1）去mysql的安装目录找到my.ini文件，复制 datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</p><p>（2）在控制面板卸载MySQL</p><p>（3）删除C:/ProgramData目录下的MySQL文件夹。</p></li></ul><ul><li><p>配置</p><p>MySQL服务启动</p><ul><li><p>cmd–&gt; services.msc 打开服务的窗口</p></li><li><p>使用管理员打开cmd</p></li><li><p>net start mysql : 启动mysql的服务<br>net stop mysql:关闭mysql服务</p></li></ul></li></ul><p>  MySQL登录</p><ul><li>mysql -uroot -p密码</li><li>mysql -h连接目标ip -uroot -p连接目标的密码</li><li>mysql –host=连接目标ip –user=root –password=连接目标的密码</li></ul><p>  MySQL退出</p><ul><li>exit</li><li>quit</li></ul><ul><li><p>MySQL目录结构</p><p>MySQL安装目录：basedir=”D:/develop/MySQL/“</p></li></ul><ul><li><p>配置文件 my.ini</p><p>MySQL数据目录：datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</p></li></ul><p><span style="font-size:20px; color: blue">在数据库中，可以将数据库想象成一个文件夹，表就是一个文件，数据则是该文件中的数据。</span></p><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">→</th><th style="text-align:center">文件夹</th></tr></thead><tbody><tr><td style="text-align:center">表</td><td style="text-align:center">→</td><td style="text-align:center">文件</td></tr><tr><td style="text-align:center">数据</td><td style="text-align:center">→</td><td style="text-align:center">数据</td></tr></tbody></table><a id="more"></a><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><ul><li><p>什么是SQL？<br>Structured Query Language：结构化查询语言<br>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p></li><li><p>SQL通用语法</p><p>SQL 语句可以单行或多行书写，以分号结尾。</p></li></ul><ul><li>SQL分类</li></ul><ul><li><p>DDL(Data Definition Language)数据定义语言</p><p>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter等</p></li></ul><ul><li><p>DML(Data Manipulation Language)数据操作语言</p><p>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</p></li></ul><ul><li><p>DQL(Data Query Language)数据查询语言</p><p>用来查询数据库中表的记录(数据)。关键字：select, where 等</p></li></ul><ul><li><p>DCL(Data Control Language)数据控制语言(了解)</p><p>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</p></li></ul><h2 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h2><p>DDL：Data Definition Language    数据定义语言</p><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul><h3 id="操作数据库：CRUD"><a href="#操作数据库：CRUD" class="headerlink" title="操作数据库：CRUD"></a><span style="color : red">操作数据库：CRUD</span></h3><ul><li><p>C(Create):创建</p><ul><li><p>创建数据库：</p><p>create database 数据库名称;</p></li><li><p>创建数据库，判断不存在，再创建：</p><p>create database if not exists 数据库名称;</p></li><li><p>创建数据库，并指定字符集</p><p>create database 数据库名称 character set 字符集名;</p></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><p>create database if not exists db4 character set gbk;</p></li></ul></li></ul><ul><li><p>R(Retrieve)：查询</p><ul><li><p>查询所有数据库的名称:</p><p>show databases;</p></li><li><p>查询某个数据库的字符集:查询某个数据库的创建语句</p><p>show create database 数据库名称;</p></li></ul></li></ul><ul><li><p>U(Update):修改</p><ul><li><p>修改数据库的字符集</p><p>alter database 数据库名称 character set 字符集名称;</p></li></ul></li></ul><ul><li><p>D(Delete):删除</p><ul><li><p>删除数据库</p><p>drop database 数据库名称;</p></li><li><p>判断数据库存在，存在再删除</p><p>drop database if exists 数据库名称;</p></li></ul></li></ul><h3 id="操作表：CRUD"><a href="#操作表：CRUD" class="headerlink" title="操作表：CRUD"></a><span style="color : red">操作表：CRUD</span></h3><ul><li>C(Create):创建</li></ul><ol><li><p>语法：<br> create table 表名(</p><pre><code>列名1 数据类型1,列名2 数据类型2,....列名n 数据类型n</code></pre><p> );</p><ul><li>注意：最后一列，不需要加逗号（,）</li><li>数据库类型：<ol><li>int：整数类型<ul><li>age int,</li></ul></li><li>double:小数类型<ul><li>score double(5,2)</li></ul></li><li>date:日期，只包含年月日，yyyy-MM-dd</li><li>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</li><li>timestamp:时间戳类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    <ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li></ol></li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li><li><p>创建表</p><p>​    create table student(<br>​        id int,<br>​        name varchar(32),<br>​        age int ,<br>​        score double(4,1),<br>​        birthday date,<br>​        insert_time timestamp<br>​    );</p></li><li><p>复制表：</p><p>create table 表名 like 被复制的表名;    </p></li></ul></li></ol><ul><li><p>R(Retrieve)：查询</p><ul><li><p>查询某个数据库中所有的表名称</p><p>show tables;</p></li><li><p>查询表结构</p><p>desc 表名;</p></li></ul></li></ul><ul><li>U(Update):修改</li></ul><ol><li><p>修改表名<br> alter table 表名 rename to 新的表名;</p><p> rename table 表名 to 新的表名;</p></li><li><p>修改表的字符集<br> alter table 表名 character set 字符集名称;</p></li><li><p>添加一列<br> alter table 表名 add 列名 数据类型;</p></li><li><p>修改列名称 类型<br> alter table 表名 change 列名 新列名 新数据类型;<br> alter table 表名 modify 列名 新数据类型;</p></li><li><p>删除列<br> alter table 表名 drop 列名;</p></li></ol><ul><li>D(Delete):删除<ul><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li><li>客户端图形化工具：SQLYog</li></ul></li></ul><h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><p>DML：Data Manipulation Language    数据操作语言</p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><ul><li>语法：<ul><li>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</li></ul></li><li>注意：<ol><li>列名和值要一一对应。</li><li>如果表名后，不定义列名，则默认给所有列添加值<br> insert into 表名 values(值1,值2,…值n);</li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol></li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><ul><li>语法：<ul><li>delete from 表名 [where 条件]</li></ul></li><li>注意：<ol><li>如果不加条 件，则删除表中所有记录。</li><li>如果要删除所有记录<ol><li>delete from 表名; – 不推荐使用。有多少条记录就会执行多少次删除操作</li><li>TRUNCATE TABLE 表名; – 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</li></ol></li></ol></li></ul><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ul><li><p>语法：</p><ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2,… [where 条件];</li></ul></li><li><p>注意：</p><ol><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ol></li></ul><h2 id="DQL：查询表中的记录（单表查询）"><a href="#DQL：查询表中的记录（单表查询）" class="headerlink" title="DQL：查询表中的记录（单表查询）"></a>DQL：查询表中的记录（单表查询）</h2><p>DQL：Data QueryLanguage    数据查询语言</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>select    字段列表</p><p>from    表名列表</p><p>where    条件列表</p><p>group by    分组字段</p><p>having    分组之后的条件</p><p>order by    排序列名 [ASC | DESC]</p><p>limit    起始索引,长度;</p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><ol><li>多个字段的查询<br> select 字段名1，字段名2… from 表名；<ul><li>注意：<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li>去除重复：<ul><li>distinct</li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值。</li></ul></li></ul></li><li>起别名：<ul><li>as：as也可以省略</li></ul></li></ol><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ol><li>where子句后跟条件</li><li><p>运算符</p><ul><li><p>>、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p></li><li><p>BETWEEN…AND  </p></li><li><p>IN( 集合) </p></li><li><p>LIKE：模糊查询</p><ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li><p>IS NULL  </p></li></ul></li></ol><ul><li><p>and  或 &amp;&amp;</p><pre><code>* or  或 || * not  或 !    <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄大于20岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄等于20岁</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不等于20岁</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age != <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &lt;&gt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于等于20 小于等于30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> &amp;&amp;  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> <span class="keyword">AND</span>  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄22岁，18岁，25岁的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">22</span> <span class="keyword">OR</span> age = <span class="number">18</span> <span class="keyword">OR</span> age = <span class="number">25</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">22</span>,<span class="number">18</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩为null</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english = <span class="literal">NULL</span>; <span class="comment">-- 不对的。null值不能使用 = （!=） 判断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩不为null</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓马的有哪些？ like</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'马%'</span>;</span><br><span class="line"><span class="comment">-- 查询姓名第二个字是化的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">"_化%"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名是3个字的人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中包含德的人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'%德%'</span>;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><ul><li><p>语法：</p><p>order by 子句</p></li><li><p>排序方式：</p><ul><li>ASC：升序</li><li>DESC：降序</li></ul></li><li><p>注意：</p><p>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</p></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><p>将一列数据作为一个整体，进行纵向的计算。</p><ul><li>count：计算个数<ul><li>一般选择非空的列：主键</li><li>count(*)</li></ul></li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li><p>avg：计算平均值</p></li><li><p>注意：聚合函数的计算，排除null值。</p><p>解决方案：</p><ul><li>选择不包含非空的列进行计算</li><li>IFNULL函数</li></ul></li></ul><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ul><li><p>语法：group by 分组字段;</p></li><li><p>注意：</p><ul><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？<ul><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ul></li></ul></li><li><p>案例：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组。分别查询男、女同学的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组。分别查询男、女同学的平均分,人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>) &gt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(<span class="keyword">id</span>) 人数 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> 人数 &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul><li>语法：limit 起始索引,长度;</li><li>公式：起始索引 = （当前的页码 - 1） *  每页显示的条数</li><li>limit是一个MySQL“方言”</li></ul><p><span style="color:red;font-size:25px">注意点：</span></p><p>limit a,b 在sql语句最后，表示从索引为a的记录开始查询，最多查询b条记录，<span style="color:red;font-size:25px">a可以省略，如果不写，则默认从索引为0的记录开始查询</span></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</li><li>分类：<ul><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ul></li></ul><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>非空约束：not null，某一列的值不能为null</p><ul><li><p>创建表时添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- name为非空</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建表完后，添加非空约束</p><p><code>ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</code></p></li><li><p>删除name的非空约束</p><p><code>ALTER TABLE stu MODIFY NAME VARCHAR(20);</code></p></li></ul><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>default</p><ul><li><p>创建表时添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>;</span><br><span class="line">    name VARCHAR(32) DEFAULT '张三'</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="number">1</span>); <span class="comment">-- 不会报错，name有默认值'张三'</span></span><br></pre></td></tr></table></figure></li><li><p>删除默认约束</p><p><code>ALTER TABLE stu MODIFY name VARCHAR(32);</code></p></li><li><p>创建表之后添加默认约束</p><p><code>ALTER TABLE stu MODIFY name VARCHAR(32) DEFAULT &#39;李四&#39;;</code></p></li></ul><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>唯一约束：unique，某一列的值不能重复</p><ul><li><p>注意：</p><ul><li><p>唯一约束可以有NULL值，而且可以有多个，因为NULL没有数据，不存在重复的问题</p></li><li><p>在创建表时，添加唯一约束</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="comment">-- 手机号</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除唯一约束</p><p><code>ALTER TABLE stu DROP INDEX phone_number;</code></p></li><li><p>在表创建完后，添加唯一约束</p><p><code>ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</code></p></li></ul><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>主键约束：primary key。</p><ul><li><p>注意：</p><ul><li>含义：非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ul></li><li><p>在创建表时，添加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,<span class="comment">-- 给id添加主键约束</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除主键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误 alter table stu modify id int ;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建完表后，添加主键</p><p><code>ALTER TABLE stu MODIFY id INT PRIMARY KEY;</code></p></li><li><p>自动增长：</p><ul><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="comment">-- 给id添加主键约束</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除自动增长</p><p><code>ALTER TABLE stu MODIFY id INT;</code></p></li><li><p>添加自动增长</p><p><code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></p></li></ul></li></ul><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</p><ul><li><p>在创建表时，可以添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    ....</span><br><span class="line">    外键列</span><br><span class="line">    <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键列名称) <span class="keyword">references</span> 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除外键</p><p><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</code></p></li><li><p>创建表之后，添加外键</p><p><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</code></p></li></ul><h3 id="级联操作"><a href="#级联操作" class="headerlink" title="级联操作"></a>级联操作</h3><ul><li><p>添加级联操作</p><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 </span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键字段名称) </span><br><span class="line"><span class="keyword">REFERENCES</span> 主表名称(主表列名称) </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure><ul><li>分类：<ul><li>级联更新：ON UPDATE CASCADE </li><li>级联删除：ON DELETE CASCADE </li></ul></li></ul></li></ul><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><p><span style="color:black; font-size:25px">多表之间的关系</span></p><ul><li><p>分类</p><ul><li><p>一对一：</p><p>如：人和身份证</p><p>分析：一个人只有一个身份证，一个身份证只能对应一个人</p></li><li><p>一对多（多对一）：</p><p>如：部门和员工</p><p>分析：一个部门有多个员工，一个员工只能对应一个部门</p></li><li><p>多对多：</p><p>如：学生和课程</p><p>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p></li></ul></li><li><p>实现关系</p><ul><li><p>一对多(多对一)：</p><p>如：部门和员工</p><p>实现方式：在多的一方建立外键，指向一的一方的主键。</p></li><li><p>多对多：</p><p>如：学生和课程</p><p>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</p></li><li><p>一对一：</p><p>如：人和身份证</p><p>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</p></li></ul></li></ul><p><span style="color:red; font-size:25px"><strong><em>数据库设计的范式（重点）</em></strong></span></p><ul><li><p>概念：设计数据库时，需要遵循的一些规范。</p><p>要遵循后边的范式要求，必须先遵循前边的所有范式要求。</p><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p></li><li><p>分类</p><ul><li><p>第一范式（1NF）：每一列都是不可分割的原子数据项</p></li><li><p>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><ul><li><p>几个概念：</p><p>1、函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</p><p>例如：学号–&gt;姓名。  （学号，课程名称） –&gt; 分数</p><p>2、完全函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。</p><p>例如：（学号，课程名称） –&gt; 分数</p><p>3、部分函数依赖：A–&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。</p><p>例如：（学号，课程名称） – &gt; 姓名</p><p>4、传递函数依赖：A–&gt;B, B – &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</p><p>例如：学号–&gt;系名，系名–&gt;系主任</p><p>5、码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</p><p>例如：该表中码为：（学号，课程名称）</p><ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除过码属性组的属性</li></ul></li></ul></li><li><p>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p></li></ul></li></ul><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ul><li><p>命令行方式</p><p>语法：</p><ul><li>备份：mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</li><li>还原：<ul><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件。source文件路径</li></ul></li></ul></li><li><p>图形化工具</p></li></ul><h2 id="DQL：查询表中的记录（多表查询）【重点】"><a href="#DQL：查询表中的记录（多表查询）【重点】" class="headerlink" title="DQL：查询表中的记录（多表查询）【重点】"></a><span style="color : red">DQL：查询表中的记录（多表查询）【重点】</span></h2><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><p>有两个集合A,B .取这两个集合的所有组成情况。</p><p>要完成多表查询，需要消除无用的数据</p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>使用内连接查询时，要明确以下几点：</p><ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol><h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><p>使用where条件消除无用数据</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息和对应的部门信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询员工表的名称，性别。部门表的名称</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.name,emp.gender,dept.name <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.name, <span class="comment">-- 员工表的姓名</span></span><br><span class="line">    t1.gender,<span class="comment">-- 员工表的性别</span></span><br><span class="line">    t2.name <span class="comment">-- 部门表的名称</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    emp t1,</span><br><span class="line">    dept t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure><h4 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h4><p>语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.dept_id = dept.id;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><ul><li><p>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</p></li><li><p>查询的是左表所有数据以及其交集部分。</p></li><li><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> t1.*,t2.<span class="string">`name`</span> <span class="keyword">FROM</span> emp t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept t2 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><ul><li><p>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</p></li><li><p>查询的是右表所有数据以及其交集部分。</p></li><li><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t2 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> emp t1 <span class="keyword">ON</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h4><p>MySQL不支持full join，Oracle和SQLServer才支持。</p><ul><li><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">o.Id_o,o.orderNo,</span><br><span class="line">p.Id_P,p.name,p.Address,p.City</span><br><span class="line"><span class="keyword">FROM</span> person p</span><br><span class="line"><span class="keyword">full</span> <span class="keyword">join</span> oders o <span class="keyword">ON</span> o.Id_P = p.Id_P;</span><br></pre></td></tr></table></figure></li><li><p>MySQL要达到全连接的效果，必须使用left join + union + right join 的方式实现，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> persons p <span class="keyword">left</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> p.Id_P = o.Id_P</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> persons p <span class="keyword">right</span> <span class="keyword">join</span> orders o <span class="keyword">ON</span> p.Id_P = o.Id_P;</span><br></pre></td></tr></table></figure></li><li><p>全连接，满足条件的数据就连接，不满足条件的数据会保留<span style="color:red;font-size:25px">（对两张表中的所有数据都不过滤，只起到了对两张表的笛卡尔积去除重复的作用）</span></p></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资最高的员工信息</span></span><br><span class="line"><span class="comment">-- 1 查询最高的工资是多少 9000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2 查询员工信息，并且工资等于9000的</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = <span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一条sql就完成这个操作。子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span> = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li><li><p>子查询不同情况</p><ul><li><p>子查询的结果是单行单列的：</p><ul><li><p>子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工工资小于平均工资的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.salary &lt; (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子查询的结果是多行单列的：</p><p>子查询可以作为条件，使用运算符in来判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询'财务部'和'市场部'所有的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id = <span class="number">3</span> <span class="keyword">OR</span> dept_id = <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>);</span><br></pre></td></tr></table></figure></li><li><p>子查询的结果是多行多列的：</p><p>子查询可以作为一张虚拟表参与查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dept t1 ,(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`join_date`</span> &gt; <span class="string">'2011-11-11'</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id = t2.dept_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 普通内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp t1,dept t2 <span class="keyword">WHERE</span> t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span> <span class="keyword">AND</span> t1.<span class="string">`join_date`</span> &gt;  <span class="string">'2011-11-11'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><p>概念：Transaction，相当于是一个容器（盒子），可以将一个操作的多个步骤（SQL代码）装起来之后，形成了一个不可分割的最小整体（原子性），这个操作整体要么都成功，要么都失败。</p></li><li><p>使用场景：例如转账操作。</p></li><li><p>事务的三个操作：</p><ul><li><p>开启事务</p><p>start    transaction;</p></li><li><p>回滚：如果事务中至少有一个操作失败，就可以回滚</p><p>rollback;</p></li><li><p>提交事务：如果事务中的多个操作全部成功，就可以提交事务</p><p>commit;</p></li></ul></li><li><p>事务的提交方式</p><ul><li><p>自动提交</p><p>MySQL默认就是自动提交，执行一条DML语句就自动提交一次。</p><p>查询默认的提交方式：</p><p><code>select @@autocommit;     -- 1：自动提交    0：手动提交</code></p><p>修改默认的提交方式：</p><p><code>set @@autocommit = 0;    -- 修改默认提交方式为手动提交</code></p></li><li><p>手动提交</p><p>如果自己开启了事务，被事务管理的sql执行完之后，需要手动提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>事务的四大特征</p><ul><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li>持久性：当事务提交或者回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间，相互独立。</li><li>一致性：事务操作前后，数据总量不变。</li></ul></li><li><p>事务的隔离级别</p><ul><li><p>概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p></li><li><p>存在问题：</p><ul><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ul></li><li><p>隔离级别：</p><ol><li>read uncommitted：读未提交<ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li>read committed：读已提交 （Oracle默认级别）<ul><li>产生的问题：不可重复读、幻读</li></ul></li><li>repeatable read：可重复读 （MySQL默认级别）<ul><li>产生的问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有的问题</li></ul></li></ol></li></ul></li></ul><pre><code>- 注意：隔离级别从小到大安全性越来越高，但是效率越来越低- 数据库查询隔离级别：`select @@tx_isolation;`- 数据库设置隔离级别：`set global transaction isolation level  级别字符串;`</code></pre><ul><li><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment">-- 转账操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance - <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> balance = balance + <span class="number">500</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="DCL：访问控制"><a href="#DCL：访问控制" class="headerlink" title="DCL：访问控制"></a>DCL：访问控制</h2><ul><li><p>对数据库用户的增删改查</p><ol><li><p>添加用户</p><p>语法：<code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p></li><li><p>删除用户</p><p>语法：<code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p></li><li><p>修改用户密码</p><ul><li><p>方式1：切到mysql数据库，然后使用普通的update语句修改。</p><p><code>update user set password = password(&#39;新密码&#39;) where user = &#39;用户名&#39;;</code></p></li><li><p>方式2：<code>set password for &#39;用户名&#39;@&#39;主机名&#39; = password(&#39;新密码&#39;);</code></p></li><li><p>mysql中忘记了root用户的密码？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">找回密码步骤：</span><br><span class="line">1、cmd -- &gt; net stop mysql 停止mysql服务</span><br><span class="line">tips：需要管理员运行该cmd</span><br><span class="line">2、使用无验证方式启动mysql服务： mysqld --skip-grant-tables</span><br><span class="line">3、打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</span><br><span class="line">4、use mysql;</span><br><span class="line">5、update user set password = password('你的新密码') where user = 'root';</span><br><span class="line">6、关闭两个窗口</span><br><span class="line">7、打开任务管理器，手动结束mysqld.exe 的进程</span><br><span class="line">8、启动mysql服务</span><br><span class="line">9、使用新密码登录。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 切换到mysql数据库</span></span><br><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="comment">-- 2. 查询user表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br><span class="line"></span><br><span class="line">tips：通配符 % 表示可以在任意主机使用用户登录数据库</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>对数据库用户的权限管理</p><ol><li><p>查询用户现有的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li><p>为用户授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="comment">-- 给张三用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'zhangsan'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>撤销用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限：</span></span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> db3.<span class="string">`account`</span> <span class="keyword">FROM</span> <span class="string">'lisi'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE Error Log</title>
      <link href="/Java/JavaSE-Error-Log/"/>
      <url>/Java/JavaSE-Error-Log/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中protected方法访问权限的问题"><a href="#Java中protected方法访问权限的问题" class="headerlink" title="Java中protected方法访问权限的问题"></a>Java中protected方法访问权限的问题</h1><p>在cn.skywalker.test05包下的Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.skywalker.test05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SkyWalker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 - 06 - 29 - 19:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"display....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cn.skywalker.test06包下的Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.skywalker.test06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.skywalker.test05.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SkyWalker</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019 - 06 - 29 - 20:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//        student.display();</span></span><br><span class="line">        <span class="comment">//在不同包实例化Student类对象，该对象对Student类中声明的protected方法的调用不属于本类调用</span></span><br><span class="line"></span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我用cn.skywalker.test06包下的Test类继承了cn.skywalker.test05包下的Student类，但是在Test类中的main()函数中实例化了一个Student对象，该对象却无法调用Student类中使用protected修饰的方法。</p><p>这里再给出《java in a nutshell》中的一段话：</p><p>protected access requires a little more elaboration. Suppose class A declares a protected field x and is extended by a class B, which is defined in a different package (this last point is important). Class B inherits the protected field x, and its code can access that field in the current instance of B or in any other instances of B that the code can refer to. This does not mean, however, that the code of class B can start reading the protected fields of arbitrary instances of A! If an object is an instance of A but is not an instance of B, its fields are obviously not inherited by B, and the code of class B cannot read them.</p><a id="more"></a><p>翻译：<span style="color : red; font-size:25px"><strong>protected访问是需要一些准备的。假如类A定义了一个protected的属性x，并且被定义在不同包中的类B扩展了类A。A和B不再同一个包内这一点非常重要。从而，B继承了A的protected属性x，而且在当前B 的实例中这个属性是能够被访问的又或者其他代码中涉及到访问这个属性的B的实例中也是可以访问这个属性的。然而，这并不表示B 的代码可以任意访问A的实例中protected修饰的属性！如果一个对象是A而不是B的实例，显然B是没有继承该对象的属性的，从而B的代码无法访问它们。</strong></span></p><p>方法的访问控制：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">public</th><th style="text-align:center">protected</th><th style="text-align:center">default</th><th style="text-align:center">private</th></tr></thead><tbody><tr><td style="text-align:center">同类</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">同包</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">子类（不同包）</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">不同包中无继承关系的类</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><h1 id="使用同名局部变量的问题"><a href="#使用同名局部变量的问题" class="headerlink" title="使用同名局部变量的问题"></a>使用同名局部变量的问题</h1><p>话不多说，直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">5</span>; <span class="comment">//成员变量age，默认初始化值为5</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123; <span class="comment">//成员方法，有一个局部变量形参age</span></span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123; <span class="comment">//成员方法，返回成员变量age的值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123; <span class="comment">//主函数</span></span><br><span class="line">        <span class="comment">//创建对象，进行测试</span></span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.setAge(<span class="number">10</span>);</span><br><span class="line">        System.out.println(t.getAge()); <span class="comment">//运行结果为5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，我们能看到在Test类中的setAge(int age)方法中，没有使用this关键字对成员变量age进行赋值。而且从运行结果来看，不难发现，在setAge(int age)方法中age = age;这句代码，两个age均指的是形参age这个局部变量。如没有用this显式指明age，则会遵循就近原则，就会发生局部变量age对自己赋值的情况。</p><h1 id="局部变量使用范围问题"><a href="#局部变量使用范围问题" class="headerlink" title="局部变量使用范围问题"></a>局部变量使用范围问题</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    String s = <span class="string">"Outer"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        S2 s2 = <span class="keyword">new</span> S2();</span><br><span class="line">        s2.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span></span>&#123;</span><br><span class="line">    String s = <span class="string">"S1"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span> <span class="keyword">extends</span> <span class="title">S1</span></span>&#123;</span><br><span class="line">    String s = <span class="string">"S2"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如上所示，最终运行结果为S1。</p><p>可以总结出：就近原则在使用时，应注意方法对变量的调用也是遵循就近原则的。</p><h1 id="多态中关于变量的使用"><a href="#多态中关于变量的使用" class="headerlink" title="多态中关于变量的使用"></a>多态中关于变量的使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(f.a);</span><br><span class="line">        f.method;<span class="comment">//这是子类的method方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out,println(<span class="string">"这是父类的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是子类的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码如上所示。</p><p>我的错误选项：</p><ul><li><p>如果将父类中的成员变量a删除，修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out,println(<span class="string">"这是父类的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">这是子类的method方法</span><br></pre></td></tr></table></figure></li></ul><p>上面的选项是错误的。正确的运行结果为：<span style="color:red;font-size:25px">编译器报错。</span></p><p>因为如果将Fu类中的成员变量a删除后，在Demo的主函数中f.a的用法将会无法通过编译。</p><h1 id="关于println-与toString-的联系"><a href="#关于println-与toString-的联系" class="headerlink" title="关于println()与toString()的联系"></a>关于println()与toString()的联系</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用ToStringTest的 toString方法</span></span><br><span class="line">        System.out.println(<span class="string">"love "</span> + <span class="keyword">new</span> ToStringTest());   </span><br><span class="line">        ToStringTest a = <span class="keyword">new</span> ToStringTest();</span><br><span class="line">        a.i++;</span><br><span class="line">        System.out.println(<span class="string">"me "</span> + a.i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"I "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"java "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love java </span><br><span class="line">me 2</span><br></pre></td></tr></table></figure><p>从结果中，猛一下似乎看不太明白，但静下心来仔细分析，我们会发现在主函数的第一句代码</p><p><code>System.out.println(&quot;love &quot; + new ToStringTest());</code></p><p>执行过程中，JVM优先解析了 “ + “后面的new ToStringTest()，而我们知道，在JVM调用println()时，底层是调用了该Object对象的toString()方法，所以会最先执行ToStringTest类中重写的toString()方法。结果也就在逻辑之中了。</p><h1 id="String类型的深度解析"><a href="#String类型的深度解析" class="headerlink" title="String类型的深度解析"></a>String类型的深度解析</h1><h2 id="String的本质"><a href="#String的本质" class="headerlink" title="String的本质"></a>String的本质</h2><p>打开String的源码，类注释中有这么一段话</p><blockquote><p>“Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings.Because String objects are immutable they can be shared.”。</p></blockquote><p><span style="color:red;font-size : 25px">这句话总结归纳了String的一个最重要的特点：</span></p><p>String是值不可变(immutable)的常量，是线程安全的(can be shared)。      </p><p>接下来，String类使用了final修饰符，表明了String类的第二个特点：String类是不可继承的。       </p><p>下面是String类的成员变量定义，从类的实现上阐明了String值是不可变的(immutable)。           </p><p>　　 private final char value[];             </p><pre><code>private final int count;         </code></pre><p>因此，我们看String类的concat方法。实现该方法第一步要做的肯定是扩大成员变量value的容量，扩容的方法重新定义一个大容量的字符数组buf。第二步就是把原来value中的字符copy到buf中来，再把需要concat的字符串值也copy到buf中来，这样子，buf中就包含了concat之后的字符串值。下面就是问题的关键了，如果value不是final的，直接让value指向buf，然后返回this，则大功告成，没有必要返回一个新的String对象。但是。。。可惜。。。由于value是final型的，所以无法指向新定义的大容量数组buf，那怎么办呢？“return new String(0, count + otherLen, buf);”，这是String类concat实现方法的最后一条语句，重新new一个String对象返回。这下真相大白了吧！</p><p>​       <strong>总结：</strong>String实质是字符数组，两个特点：</p><ul><li>该类不可被继承</li><li>不可变性(immutable)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"ab"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">String s3 = s1 + <span class="string">"c"</span>;</span><br><span class="line">System.out.println(s3 == s2); <span class="comment">//false</span></span><br><span class="line">System.out.println(s3.equals(s2)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"a"</span> + <span class="string">"b"</span> + <span class="string">"c"</span>;</span><br><span class="line">String s2 = <span class="string">"abc"</span>;</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="java网络编程Socket文件上传过程中的中文乱码问题"><a href="#java网络编程Socket文件上传过程中的中文乱码问题" class="headerlink" title="java网络编程Socket文件上传过程中的中文乱码问题"></a>java网络编程Socket文件上传过程中的中文乱码问题</h1><p>文件上传功能的实现</p><p>要求</p><p>1、开启文件上传服务器后，侦听TCP连接，若有新连接，则创建一条新的线程去处理连接。</p><p>2、文件上传的流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（1）   客户端要求用户录入一个文件路径。客户端对路径进行合理性判断。</span><br><span class="line"></span><br><span class="line">    （2）</span><br><span class="line">        第一次通信：</span><br><span class="line">            如果路径正确，则客户端将文件名（getName()方法）发送给服务器。服务器进行接收。</span><br><span class="line"></span><br><span class="line">    （3）</span><br><span class="line">        第二次通信：</span><br><span class="line">            服务器接收到文件名后，判断给定的目录中是否存在该文件（exists()方法），</span><br><span class="line">            如果不存在，则反馈false;如果存在则反馈true。</span><br><span class="line">            客户端等待反馈结果。</span><br><span class="line"></span><br><span class="line">    （4）</span><br><span class="line">        第三次通信（文件复制的核心部分）：</span><br><span class="line">            if (反馈为false) &#123;</span><br><span class="line">                客户端：将文件读入，通过socket输出流传递</span><br><span class="line">                服务器端：通过socket输入流接收，将文件写出</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                提示文件已存在，上传失败</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    （5）</span><br><span class="line">        第四次通信：</span><br><span class="line">            复制成功后，服务器反馈复制成功信息。</span><br></pre></td></tr></table></figure><p>问题解决很简单（突然感觉自己好蠢）：</p><p>不要使用windows自带的鼠标右键新建-&gt;新建文本文档。因为会默认使用GBK格式。</p><p>需要使用一些UTF-8编码格式的或者其他格式的都可以识别，只要编码解码格式相同，就不会出现乱码问题。</p><h1 id="关于java中true和false是否为Object类型的问题"><a href="#关于java中true和false是否为Object类型的问题" class="headerlink" title="关于java中true和false是否为Object类型的问题"></a>关于java中true和false是否为Object类型的问题</h1><p>在调用方法时，形参要求的是Object类型，我传了一个false进去，没报错也运行出来了，然后就有点小疑惑，仔细想了想，想到了boolean的包装类Boolean。在参数传进去的时候，应该是把false当作一个Boolean类型了。</p><h1 id="Scanner类中next-和nextLine-的区别"><a href="#Scanner类中next-和nextLine-的区别" class="headerlink" title="Scanner类中next()和nextLine()的区别"></a>Scanner类中next()和nextLine()的区别</h1><p>对于键盘录入对象Scanner对象的两个录入字符串方法的区别<br>Scanner sc = new Scanner(System.in);<br>sc.next()和 sc.nextLine();的区别<br>next() 对于录入的字符串碰到空格就会停止录入<br>nextLine()会把整行字符串全部录入<br>并且sc.next() 在录入字符串后会在尾部加一个 \r\n</p><p>因而sc.nextLine()会录入 \r\n 而导致原来nextLine要录入的字符串没有录入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例1：</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">nextAndNextLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(“请输入第一个字符串”);</span><br><span class="line">        String a = sc.next();</span><br><span class="line">        System.out.println(“请输入第二个字符串”);</span><br><span class="line">        String b = sc.nextLine();</span><br><span class="line">        System.out.println(“字符串<span class="number">1</span>:” + a);</span><br><span class="line">        System.out.println(“字符串<span class="number">2</span>:” + b);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>请输入第一个字符串</p><p>abc</p><p>请输入第二个字符串</p><p>字符串1：abc</p><p>字符串2：</p><p>这里我们可以看出来我们本来要录入两个字符串，<strong>但是只录入和打印了一个字符串</strong>，这个原因是next()方法会在尾部加一个换行符，windows系统的换行符是\r\n,因而后面的nextLine()方法将\r\n录入进去，从而造成第二次没有录入字符串的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例2：</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">nextAndNextLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(“请输入第一个字符串”);</span><br><span class="line">        String a = sc.nextLine();</span><br><span class="line">        System.out.println(“请输入第二个字符串”);</span><br><span class="line">        String b = sc.next();</span><br><span class="line">        System.out.println(“字符串<span class="number">1</span>:” + a);</span><br><span class="line">        System.out.println(“字符串<span class="number">2</span>:” + b);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>请输入第一个字符串</p><p>abc</p><p>请输入第二个字符串</p><p>字符串1：abc</p><p>字符串2：abc</p><p>这时候我们可以看到,键盘允许你录入两个数据,并且正确的输出了两个数据。这里我们可以看出nextLine()方法后面并不会加默认的符号，<strong>因此我建议录入字符串尽量用nextLine方法</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例3：</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">nextAndNextLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(“请输入第一个字符串”);</span><br><span class="line">        String a = sc.nextLine();</span><br><span class="line">        System.out.println(“请输入第二个字符串”);</span><br><span class="line">        String b = sc.next();</span><br><span class="line">        System.out.println(“字符串<span class="number">1</span>:” + a);</span><br><span class="line">        System.out.println(“字符串<span class="number">2</span>:” + b);</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>请输入第一个字符串</p><p>abc</p><p>请输入第二个字符串</p><p>ab  c</p><p>字符串1：abc</p><p>字符串2：ab</p><p>这里我们可以看出来，next()方法碰到空格就会停止录入,因此只录入abc，而nextLine()方法会将这行字符串全部录入。<strong>因此建议用nextLine()方法录入字符串</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -ErrorLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/Java/JavaSE/"/>
      <url>/Java/JavaSE/</url>
      
        <content type="html"><![CDATA[<h1 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h1><ul><li>右键 “我的电脑” – “属性” – “高级系统设置” – “高级” – “环境变量” 打开环境变量设置。</li><li>新建系统变量“JAVA_HOME”，值的内容为JDK的根目录。</li><li>在“Path”环境变量的值中，增加“%JAVA_HOME%\bin;”</li></ul><p>此时再使用cmd即可直接使用javac和java命令。</p><h1 id="JDK9的JShell的简单使用"><a href="#JDK9的JShell的简单使用" class="headerlink" title="JDK9的JShell的简单使用"></a>JDK9的JShell的简单使用</h1><p>直接在cmd中输入jshell，回车，即可启动JShell。</p><p>JShell一般用于极其简单、轻量的情况。</p><h1 id="编译器的两点优化（对于变量的赋值）"><a href="#编译器的两点优化（对于变量的赋值）" class="headerlink" title="编译器的两点优化（对于变量的赋值）"></a>编译器的两点优化（对于变量的赋值）</h1><h2 id="第一个优化"><a href="#第一个优化" class="headerlink" title="第一个优化"></a>第一个优化</h2><p>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐含地为我们补上一个(byte)(short)(char)。</p><ul><li>如果没有超过左侧的范围，编译器补上强转。</li><li>如果右侧超过了左侧范围，那么直接编译器报错。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 右侧确实是一个int数字，但是没有超过左侧的范围，就是正确的。</span></span><br><span class="line">        <span class="comment">// int --&gt; byte, 不是自动类型转换</span></span><br><span class="line">        <span class="keyword">byte</span> num1 = <span class="comment">/*(byte)*/</span>  <span class="number">30</span>; <span class="comment">// 右侧没有超过左侧范围</span></span><br><span class="line">        System.out.println(num1); <span class="comment">// 30</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// byte num2 = 128; // 右侧超过了左侧的范围，编译器报错</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int --&gt; char, 没有超过范围</span></span><br><span class="line">        <span class="comment">// 编译器将会自动补上一个隐含的(char)</span></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="comment">/*(char)*/</span> <span class="number">65</span>;</span><br><span class="line">        System.out.println(c1); <span class="comment">// A</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二个优化"><a href="#第二个优化" class="headerlink" title="第二个优化"></a>第二个优化</h2><p>在给变量进行赋值的时候，如果右侧的表达式当中全部都是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。</p><p><span style="font-size : 25px; color:red">short result = 5 + 8; // 等号右边全部都是常量，没有任何变量参与运算</span></p><p>编译之后，得到的.class字节码文件当中相当于【直接就是】：</p><p>short result = 13;</p><p>右侧的常量结果数值，没有超过左侧范围，所以正确。</p><p><span style="color:red">这称为“编译器的常量优化”</span></p><p>但是注意：一旦表达式当中有变量参与，那么就不能进行这种优化了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">short</span> num1 = <span class="number">10</span>; <span class="comment">// 正确写法，右侧没有超过左侧范围</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">short</span> a = <span class="number">5</span>; </span><br><span class="line">        <span class="keyword">short</span> b = <span class="number">8</span>; </span><br><span class="line">        <span class="comment">// short + short --&gt; int + int --&gt; int </span></span><br><span class="line">        <span class="comment">// short result = a + b; // 错误写法！左侧需要是int类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右侧不用变量，而是采用常量，而且只有两个常量，没有别人</span></span><br><span class="line">        <span class="keyword">short</span> result = <span class="number">5</span> + <span class="number">8</span>; </span><br><span class="line">        System.out.println(result);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">short</span> result2 = <span class="number">5</span> + a + <span class="number">8</span>; <span class="comment">// 结果应该是18，但是编译器报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="switch语句使用的注意事项"><a href="#switch语句使用的注意事项" class="headerlink" title="switch语句使用的注意事项"></a>switch语句使用的注意事项</h1><ul><li><p>多个case后面的数值不可以重复</p></li><li><p>switch后面小括号当中只能是下列数据类型：</p><ul><li><p>基本数据类型：byte / short / char / int </p></li><li><p>引用数据类型：String字符串 / enum枚举</p></li></ul></li><li><p>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略。</p><ul><li>匹配哪一个case就从哪一个位置向下执行，直到遇到了break或者switch的整体结束为止。</li></ul></li></ul><p>关于switch的穿透代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Debug01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (a) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">"1."</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// switch的穿透，所以会执行下面的输出语句。</span></span><br><span class="line">                System.out.println(<span class="string">"default."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码的运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">default.</span><br></pre></td></tr></table></figure><h1 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h1><ul><li>方式1：<ul><li>动态初始化：数据类型[] 数组名称 = new 数据类型[数组长度];</li></ul></li><li>方式2：<ul><li>标准的静态初始化：数据类型[] 数组名称 = new 数据类型[] { 元素1, 元素2, … };</li></ul></li><li>方式3：<ul><li>省略的静态初始化：数据类型[] 数组名称 = { 元素1, 元素2, … };</li></ul></li></ul><p>注意事项：</p><ol><li>静态初始化没有直接指定长度，但是仍然会自动推算得到长度。</li><li>静态初始化标准格式可以拆分成为两个步骤。</li><li>动态初始化也可以拆分成为两个步骤。</li><li>静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。</li></ol><p>使用建议：<br>如果不确定数组当中的具体内容，用动态初始化；否则，已经确定了具体的内容，用静态初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略格式的静态初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayA = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态初始化的标准格式，可以拆分成为两个步骤</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayB;</span><br><span class="line">        arrayB = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">11</span>, <span class="number">21</span>, <span class="number">31</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化也可以拆分成为两个步骤</span></span><br><span class="line">        <span class="keyword">int</span>[] arrayC;</span><br><span class="line">        arrayC = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态初始化的省略格式，不能拆分成为两个步骤。</span></span><br><span class="line"><span class="comment">//        int[] arrayD;</span></span><br><span class="line"><span class="comment">//        arrayD = &#123; 10, 20, 30 &#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组中的内存图</p><p><img src="..\images\数组内存图.bmp" alt="数组内存图"></p><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><ul><li><p>作用：用于产生一个随机数</p></li><li><p>所属包：java.util.Random</p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> number = random.nextInt(<span class="keyword">int</span> index);  <span class="comment">// 获取数据的范围：[0,index) 左闭右开的一个区间。</span></span><br></pre></td></tr></table></figure></li></ul><p>拓展：</p><ul><li><p>Math类下的static double random()方法的返回值为double。值为正号，大于等于 0.0 ，小于 1.0 。 即获取数据的范围：[0.0, 1.0) 左闭右开的一个区间。</p></li><li><p>常用案例：</p><ul><li><p>生成一个1~100的随机数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 使用Math类下的random()静态方法</span></span><br><span class="line"></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> num1 = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 使用Random类生成</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="方法重载的注意点"><a href="#方法重载的注意点" class="headerlink" title="方法重载的注意点"></a>方法重载的注意点</h1><ul><li><p>与返回值类型无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="comment">//method body</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="comment">//method body</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码不构成方法的重载：因为形参列表相同。虽然返回值类型不同，但方法重载与返回值类型无关。</p></li></ul><h1 id="集成开发环境IntelliJ-IDEA"><a href="#集成开发环境IntelliJ-IDEA" class="headerlink" title="集成开发环境IntelliJ IDEA"></a>集成开发环境IntelliJ IDEA</h1><ul><li>IDE（Integrated Development Environment）集成开发环境。</li></ul><p>至于本章主题描述</p><p>一句话</p><p>IDEA牛逼。。。OK就这样233</p><h2 id="IDEA中Debug的使用"><a href="#IDEA中Debug的使用" class="headerlink" title="IDEA中Debug的使用"></a>IDEA中Debug的使用</h2><h3 id="如何加断点"><a href="#如何加断点" class="headerlink" title="如何加断点"></a>如何加断点</h3><p>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可。</p><h3 id="如何运行加了断点的程序"><a href="#如何运行加了断点的程序" class="headerlink" title="如何运行加了断点的程序"></a>如何运行加了断点的程序</h3><p>在代码区域右键Debug执行。</p><h3 id="看哪里"><a href="#看哪里" class="headerlink" title="看哪里"></a>看哪里</h3><p>看Debugger窗口</p><h3 id="点哪里"><a href="#点哪里" class="headerlink" title="点哪里"></a>点哪里</h3><p>点Step Into（F7）这个箭头，也可以直接按F7，运行完之后，点击Stop结束。</p><h3 id="如何删除断点"><a href="#如何删除断点" class="headerlink" title="如何删除断点"></a>如何删除断点</h3><p>选择要删除的断点，单击鼠标左键即可。</p><p>如果是多个断点，可以每一个再点击一次，也可以一次性全部删除。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果数据来自于键盘输入（Scanner），一定要记住输入数据，不然就不能继续往下查看了。</p><h1 id="Java中的内存分配"><a href="#Java中的内存分配" class="headerlink" title="Java中的内存分配"></a>Java中的内存分配</h1><h2 id="JVM简介"><a href="#JVM简介" class="headerlink" title="JVM简介"></a>JVM简介</h2><blockquote><p>Java虚拟机（Java Virtual Machine 简称JVM）是运行所有Java程序的抽象计算机，是Java语言的运行环境，它是Java 最具吸引力的特性之一。Java虚拟机有自己完善的硬体架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。 </p><p>一个运行时的Java虚拟机实例的天职是：负责运行一个java程序。当启动一个Java程序时，一个虚拟机实例也就诞生了。当该程序关闭退出，这个虚拟机实例也就随之消亡。如果同一台计算机上同时运行三个Java程序，将得到三个Java虚拟机实例。每个Java程序都运行于它自己的Java虚拟机实例中。 </p></blockquote><p>JVM的体系结构包含几个主要的子系统和内存区：</p><ul><li><strong>垃圾回收器（Garbage Collection）：</strong>负责回收堆内存（Heap）中没有被使用的对象，即这些对象已经没有被引用了。 </li></ul><ul><li><strong>类装载子系统（ClassLoader Sub-System）：</strong>除了要定位和导入二进制class文件外，还必须负责验证被导入类的正确性，为类变量分配并初始化内存，以及帮助解析符号引用。 </li></ul><ul><li><strong>执行引擎（Execution Engine）：</strong>负责执行那些包含在被装载类的方法中的指令。    </li></ul><ul><li><strong>运行时数据区（Java Memory Allocation Area）：</strong>又叫虚拟机内存或者Java内存，虚拟机运行时需要从整个计算机内存划分一块内存区域存储许多东西。例如：字节码、从已装载的class文件中得到的其他信息、程序创建的对象、传递给方法的参数，返回值、局部变量等等。</li></ul><p><img src="..\images\JVM内存图" alt="1562120489462"></p><h2 id="Java内存分区"><a href="#Java内存分区" class="headerlink" title="Java内存分区"></a>Java内存分区</h2><p>从上节知道，运行时数据区即是java内存，而且数据区要存储的东西比较多，如果不对这块内存区域进行划分管理，会显得比较杂乱无章。 根据存储数据的不同，java内存通常被划分为5个区域：<span style="color:red;font-size:25px">程序计数器（Program Count Register）、本地方法栈（Native Stack）、方法区（Method Area）、栈（Stack）、堆（Heap）</span>。  </p><ul><li><strong>程序计数器（Program Count Register）：</strong>又叫程序寄存器。JVM支持多个线程同时运行，当每一个新线程被创建时，它都将得到它自己的PC寄存器（程序计数器）。如果线程正在执行的是一个Java方法（非native），那么PC寄存器的值将总是指向下一条将被执行的指令，如果方法是 native的，程序计数器寄存器的值不会被定义。 JVM的程序计数器寄存器的宽度足够保证可以持有一个返回地址或者native的指针。    </li></ul><ul><li><strong>栈（Stack）：</strong>又叫堆栈。JVM为每个新创建的线程都分配一个栈。也就是说,对于一个Java程序来说，它的运行就是通过对栈的操作来完成的。栈以帧为单位保存线程的状态。JVM对栈只进行两种操作：以帧为单位的压栈和出栈操作。我们知道,某个线程正在执行的方法称为此线程的当前方法。我们可能不知道，当前方法使用的帧称为当前帧。当线程激活一个Java方法，JVM就会在线程的 Java堆栈里新压入一个帧，这个帧自然成为了当前帧。在此方法执行期间，这个帧将用来保存参数、局部变量、中间计算过程和其他数据。从Java的这种分配机制来看,堆栈又可以这样理解：栈(Stack)是操作系统在建立某个进程时或者线程(在支持多线程的操作系统中是线程)为这个线程建立的存储区域，该区域具有先进后出的特性。</li></ul><ul><li><strong>方法区（Method Area）：</strong>当虚拟机装载一个class文件时，它会从这个class文件包含的二进制数据中解析类型信息，然后把这些类型信息（包括类信息、常量、静态变量等）放到方法区中，该内存区域被所有线程共享，如下图所示。本地方法区存在一块特殊的内存区域，叫常量池（Constant Pool），这块内存将与String类型的分析密切相关。 </li></ul><ul><li><strong>堆（Heap）：</strong>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域。在此区域的唯一目的就是存放对象实例，几乎所有的对象实例都是在这里分配内存，但是这个对象的引用却是在栈（Stack）中分配。因此，执行String s = new String(“s”)时，需要从两个地方分配内存：在堆中为String对象分配内存，在栈中为引用（这个堆对象的内存地址，即指针）分配内存。</li></ul><!-- 双元班内容 --><hr><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul><li>格式：public class 子类名 extends 父类名 { }</li><li>范例：public class Zi extends Fu { }</li><li>代码范例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">        f.show();</span><br><span class="line">        </span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        z.method();</span><br><span class="line">        z.show();<span class="comment">//调用继承于父类的show方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类的show方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red">注意：父类的构造器无法继承下来，如需调用，使用super关键字即可。</span></p><h2 id="继承的好处与弊端"><a href="#继承的好处与弊端" class="headerlink" title="继承的好处与弊端"></a>继承的好处与弊端</h2><ul><li>好处：<ul><li>提高了代码的<span style="color : red"> 复用性</span>（多个类相同的成员可以放到同一个类中）</li><li>提高了代码的<span style="color : red"> 维护性</span>（如果方法的代码需要修改，修改一处即可）</li></ul></li><li>弊端：<ul><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li></ul></li></ul><p>继承体现的关系：<span style="color : red; font-size: 25px "> is a </span></p><h2 id="继承中成员变量的访问特点"><a href="#继承中成员变量的访问特点" class="headerlink" title="继承中成员变量的访问特点"></a>继承中成员变量的访问特点</h2><p>通过子类对象访问一个变量 ，遵循<span style="color : red; font-size: 25px ">就近原则</span>：</p><ol><li>先找局部范围</li><li>再找子类成员范围</li><li>再找父类成员范围</li><li>如果都没有就报错(不考虑父亲的父亲…) </li></ol><h2 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h2><p>与成员变量的“就近原则”类似。</p><ol><li>再找子类成员范围</li><li>再找父类成员范围</li><li>如果都没有就报错(不考虑父亲的父亲…) </li></ol><h2 id="继承中构造函数的访问特点"><a href="#继承中构造函数的访问特点" class="headerlink" title="继承中构造函数的访问特点"></a>继承中构造函数的访问特点</h2><ul><li>子类会继承父类的数据，可能还会使用父类的数据。所以子类初始化之前，一定要先完成父类的初始化。</li><li>每一个子类构造方法的第一条语句默认都是：super();</li><li>如果想要控制子类的构造方法调用父类的哪一个构造方法，使用super进行调用即可。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu的无参"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu的有参"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super();//调用父类的无参构造函数</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="number">10</span>);<span class="comment">//调用父类的有参构造函数</span></span><br><span class="line">        System.out.println(<span class="string">"Zi的无参"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认调用super();即无参构造函数，可以使用super(int值)显式调用父类的有参构造函数</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"Zi的有参"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Super内存图"><a href="#Super内存图" class="headerlink" title="Super内存图"></a>Super内存图</h2><ul><li>对象在堆内存中，会单独存在一块super区域，用来存放父类的数据</li></ul><p><img src="..\images\super内存图.bmp" alt="super内存图"></p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><ul><li>在重写方法时，可以在声明前加入@Override注解，可以帮助我们检查我们要重写的方法声明是否错误</li><li>父类中私有的方法不能被重写</li><li>子类的方法的声明和父类的方法的声明一般一致，但是有些地方可以不一致，遵循以下原则：<ul><li>一大：子类重写的方法的权限修饰符必须大于或者等于父类方法的权限修饰符<ul><li>private &lt; default &lt; protected &lt; public </li></ul></li><li>两同：<ul><li>方法名必须相同</li><li>参数列表必须相同</li></ul></li><li>两小：<ul><li><strong><em>子类重写的方法的返回值类型必须小于等于父类方法的返回值类型（针对的是引用类型，一般小于说的是子类与父类的关系，对基本类型无效）</em></strong></li><li>子类重写的方法抛出的异常必须小于等于或者少于等于父类的方法抛出的异常，如果父类方法没有抛出异常，则子类重写之后的方法绝对不能抛出异常</li></ul></li></ul></li></ul><h2 id="继承的注意事项"><a href="#继承的注意事项" class="headerlink" title="继承的注意事项"></a>继承的注意事项</h2><ul><li>Java中的类只支持<span style="color : red">单</span>继承，不支持<span style="color : red">多</span>继承（一个类只能有一个父类）</li><li>Java中的类支持<span style="color : red">多层</span>继承</li></ul><h2 id="final、static修饰符"><a href="#final、static修饰符" class="headerlink" title="final、static修饰符"></a>final、static修饰符</h2><ul><li>final修饰符：<ul><li>修饰方法：该方法无法被重写</li><li>修饰变量：该变量无法被赋值</li><li>修饰类：该类无法被继承</li></ul></li></ul><ul><li><p>static修饰符：</p><ul><li>被类的所有对象共享</li><li>可以通过类名调用</li></ul><blockquote><ul><li>非静态的成员方法<ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul></li><li>静态的成员方法<ul><li>能访问静态的成员变量</li><li>能访问静态的成员方法</li></ul></li><li>总结成一句话就是：<span style="color:red">静态成员方法只能访问静态成员</span></li></ul></blockquote></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String university; <span class="comment">//学校 共享数据！所以设计为静态！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age + <span class="string">","</span> + university);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为对象的共享数据赋值</span></span><br><span class="line">        Student.university = <span class="string">"Tsinghua"</span>;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.name = <span class="string">"lcw"</span>;</span><br><span class="line">        s1.age = <span class="number">30</span>;</span><br><span class="line">        s1.show();</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.name = <span class="string">"ld"</span>;</span><br><span class="line">        s2.age = <span class="number">33</span>;</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul><li>概念<ul><li>一个事物在不同情况下表现出的多种形态</li></ul></li><li>前提<ol><li>有继承/实现关系</li><li>有方法的重写（不一定是必须有）</li><li>父类的引用指向子类的对象</li></ol></li></ul><h2 id="多态中成员访问的特点"><a href="#多态中成员访问的特点" class="headerlink" title="多态中成员访问的特点"></a>多态中成员访问的特点</h2><ul><li>成员变量：编译看左边（父类），运行看左边（父类）</li><li>成员方法：编译看左边（父类），运行看右边（子类）</li></ul><p>总结：编译都看左边，运行也都看左边（非静态的成员方法除外）。</p><h2 id="多态的好处与弊端"><a href="#多态的好处与弊端" class="headerlink" title="多态的好处与弊端"></a>多态的好处与弊端</h2><ul><li>好处：提高了程序的扩展性</li><li>弊端：不能使用子类的特有属性、功能</li></ul><h2 id="多态的转型（引用类型的转换）"><a href="#多态的转型（引用类型的转换）" class="headerlink" title="多态的转型（引用类型的转换）"></a>多态的转型（引用类型的转换）</h2><ul><li>向上转型：小类型（子类）转为大类型（父类），自动转<ul><li>格式：父类类型 变量名    = 子类对象;</li><li>比如：Animal a = new Cat();</li><li>其实多态的体现就是向上转型</li></ul></li><li>向下转型：大类型（父类）转为小类型（子类），强制转<ul><li>格式：子类类型 对象名 = （子类类型）父类类型的对象名;</li><li>比如：Cat c = (Cat)a;</li></ul></li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ul><li>概念：使用abstract关键字修饰的类</li><li>格式：public abstract class 类名 {  }</li></ul><h2 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h2><ul><li>抽象类和抽象方法必须使用 abstract 关键字修饰</li><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象类不能实例化<ul><li>抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，这叫抽象类多态 </li></ul></li><li>抽象类的子类 <ul><li>要么重写抽象类中的所有抽象方法</li><li>要么是抽象类 </li></ul></li></ul><h2 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h2><ul><li>成员变量<ul><li>既可以是变量</li><li>也可以是常量</li></ul></li><li>构造方法<ul><li>空参构造</li><li>有参构造</li></ul></li><li>成员方法<ul><li>抽象方法</li><li>普通方法</li></ul></li></ul><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li>概念：公共的规范和标准，只要按照这些规范来就可以正确使用</li></ul><h2 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h2><ul><li>接口用关键字interface修饰 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>类实现接口用implements表示 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口不能实例化 </p><p>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。 多态的形式：具体类多态，抽象类多态，接口多态。 </p></li><li><p>接口的子类 </p><p>要么重写接口中的所有抽象方法 </p><p>要么子类也是抽象类 </p></li></ul><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li><p>概念：就是在一个类中定义一个类</p></li><li><p>格式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p></li></ul><h2 id="内部类的访问特点"><a href="#内部类的访问特点" class="headerlink" title="内部类的访问特点"></a>内部类的访问特点</h2><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li><p>外部类要访问内部类的成员，必须创建对象</p></li><li><p>分类</p><ul><li>成员内部类</li><li>局部内部类</li><li>匿名内部类</li></ul></li></ul><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="工具类设计思想"><a href="#工具类设计思想" class="headerlink" title="工具类设计思想"></a>工具类设计思想</h2><ol><li>构造方法用 private 修饰</li><li>成员用 public static 修饰</li></ol><h2 id="java-util-Arrays"><a href="#java-util-Arrays" class="headerlink" title="java.util.Arrays"></a>java.util.Arrays</h2><ul><li><p>public static String toString(int[] a)  ：将指定给定数组以指定格式的字符串返回 [元素1, 元素2, 元素3]</p><p>如果直接使<span style="font-size : 25px; color:red">用System.out.println()打印一个数组</span>，其实得到的是<span style="font-size : 25px; color:red">地址值</span>（<span style="font-size : 25px; color:red">字符数组</span>除外，字符数组打印出来的是<span style="font-size : 25px; color:red">元素内容</span>）</p></li><li><p>public static void sort(int[] a)  ：将指定的数组元素进行排序，默认升序排列</p></li></ul><h2 id="java-util-Math"><a href="#java-util-Math" class="headerlink" title="java.util.Math"></a>java.util.Math</h2><ul><li><p>1、Math类概述</p><ul><li>Math 包含执行基本数字运算的方法</li></ul></li><li><p>2、Math中方法的调用方式</p><ul><li>Math类中无构造方法，但内部的方法都是静态的，则可以通过   <strong>类名.进行调用</strong></li></ul></li><li><p>3、Math类的常用方法</p><p>| 方法名    方法名                               | 说明                                           |<br>| ———————————————- | ———————————————- |<br>| public static int   abs(int a)                 | 返回参数的绝对值                               |<br>| public static double ceil(double a)            | 返回大于或等于参数的最小double值，等于一个整数 |<br>| public static double floor(double a)           | 返回小于或等于参数的最大double值，等于一个整数 |<br>| public   static int round(float a)             | 按照四舍五入返回最接近参数的int                |<br>| public static int   max(int a,int b)           | 返回两个int值中的较大值                        |<br>| public   static int min(int a,int b)           | 返回两个int值中的较小值                        |<br>| public   static double pow (double a,double b) | 返回a的b次幂的值                               |<br>| public   static double random()                | 返回值为double的正值，[0.0,1.0)                |</p></li></ul><h2 id="java-lang-Object"><a href="#java-lang-Object" class="headerlink" title="java.lang.Object"></a>java.lang.Object</h2><ul><li>toString()</li><li>equals()</li></ul><h2 id="java-lang-System"><a href="#java-lang-System" class="headerlink" title="java.lang.System"></a>java.lang.System</h2><ul><li>System类的常用方法 </li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   static void exit(int status)</td><td>终止当前运行的   Java   虚拟机，非零表示异常终止</td></tr><tr><td>public   static long currentTimeMillis()</td><td>返回当前时间(以毫秒为单位)</td></tr></tbody></table><h2 id="java-util-Date"><a href="#java-util-Date" class="headerlink" title="java.util.Date"></a>java.util.Date</h2><ul><li>void setTime(long millis)</li><li>long getTime()</li><li>Date()：代表的当前系统时间</li><li>Date(long millis)：代表基准时间+毫秒值落到的时间</li></ul><h2 id="java-text-SimpleDateFormat"><a href="#java-text-SimpleDateFormat" class="headerlink" title="java.text.SimpleDateFormat"></a>java.text.SimpleDateFormat</h2><ul><li>SimpleDateFormat(String str)</li><li>String format(Date d)</li><li>Date parse(String str)</li></ul><h2 id="java-util-Calendar"><a href="#java-util-Calendar" class="headerlink" title="java.util.Calendar"></a>java.util.Calendar</h2><ul><li>get(int field)</li><li>void set(int year, int month, int date)</li><li>setTime(Date date)</li><li>add(int field,int amount)</li><li><span style="color:red;font-size:25px">注意：</span><ul><li><span style="color:red;font-size:25px">月份是从0~11 ，0表示1月，1表示2月，以此类推…</span></li><li><span style="color:red;font-size:25px">星期是从1-7，1表示星期日，2表示星期一，以此类推…</span></li></ul></li></ul><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><ul><li><p>基本类型包装类的作用</p><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p></li><li><p>基本类型对应的包装类</p></li></ul><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h2 id="Integer经典使用案例（String与int类型转换）"><a href="#Integer经典使用案例（String与int类型转换）" class="headerlink" title="Integer经典使用案例（String与int类型转换）"></a>Integer经典使用案例（String与int类型转换）</h2><ul><li><p>int —&gt; String</p><ul><li><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">String s1 = num + <span class="string">""</span>;</span><br><span class="line">System.out.println(s1);</span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">String s2 = String.valueOf(num);</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure></li><li><p>方式三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">String s3 = Integer.toString(num);</span><br><span class="line">System.out.println(s3);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>String —&gt; int</p><ul><li><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"100"</span>;</span><br><span class="line">Integer i = Integer.valueOf(s);</span><br><span class="line"><span class="keyword">int</span> x = i.intValue();</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">int</span> y = Integer.parseInt(s);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>案例：</p><ul><li><p>需求：有一个字符串：“91 27 46 38 50”，请写程序实现最终输出结果是：“27 38 46 50 91”</p></li><li><p>思路：</p><ul><li><p>定义一个字符串</p><ul><li><p>把字符串中的数字数据存储到一个int类型的数组中</p></li><li><p>得到字符串中每一个数字数据？</p><p>public String[] split(String regex)</p></li><li><p>定义一个int数组，把 String[] 数组中的每一个元素存储到 int 数组中</p><p>public static int parseInt(String s)</p></li></ul></li><li><p>对 int 数组进行排序</p></li><li>把排序后的int数组中的元素进行拼接得到一个字符串，这里拼接采用StringBuilder来实现</li><li>输出结果</li></ul></li><li><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">"91 27 46 38 50"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串中的数字数据存储到一个int类型的数组中</span></span><br><span class="line">        String[] strArray = s.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[strArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(strArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对 int 数组进行排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="comment">//把排序后的int数组中的元素进行拼接得到一个字符串，这里拼接采用StringBuilder来实现</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Integer的注意点："><a href="#Integer的注意点：" class="headerlink" title="Integer的注意点："></a>Integer的注意点：</h2><p>在自动装箱与自动拆箱的过程中，同样的赋值语句，可能对应不同的地址。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">Integer i2 = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">System.out.println(i1 == i2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer i3 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">Integer i4 = Integer.valueOf(<span class="number">200</span>);</span><br><span class="line">System.out.println(i3 == i4); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>然后我们扒Integer的源码，发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    high = h;</span><br><span class="line">    <span class="comment">//然后是其他部分的源码，不再赘述，只取部分说明</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h2><ul><li>程序在编译或者运行的过程中出现的错误</li><li>Java中的异常指的都是异常类</li></ul><h2 id="异常类的体系"><a href="#异常类的体系" class="headerlink" title="异常类的体系"></a>异常类的体系</h2><blockquote><p>Throwable</p><blockquote><ul><li><p>Error：不研究</p></li><li><p>Exception</p><ul><li><blockquote><p>编译时异常（检查异常）：Exception下除了RuntimeException及其子类之外的都是编译时异常</p></blockquote></li><li><blockquote><p>运行时异常（非检查异常）：RuntimeException及其子类都是运行时异常</p></blockquote></li></ul></li></ul></blockquote></blockquote><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><blockquote><p> 集合的体系结构：</p><blockquote><p>单列集合：</p><ul><li><p>Collection接口</p><blockquote><p>List接口：可以存储重复元素、存取有序、有索引可以根据索引操作元素</p><ul><li>ArrayList类</li><li>LinkedList类</li></ul></blockquote><blockquote><p>Set接口：不可以存储重复元素、存取无序、无索引不可以根据索引操作元素</p><ul><li>HashSet类</li><li>TreeSet类</li></ul></blockquote></li></ul><p>双列集合：</p><ul><li><p>Map接口</p><blockquote><ul><li>HashMap类</li></ul></blockquote></li></ul></blockquote></blockquote><h2 id="单列集合Collection"><a href="#单列集合Collection" class="headerlink" title="单列集合Collection"></a>单列集合Collection</h2><p>常用方法：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定的元素</td></tr><tr><td>void   clear()</td><td>清空集合中的元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int   size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>存储的数据是可重复的、与添加顺序一致的（存取有序）</p><ul><li><p>ArrayList集合</p><p>​    底层是数组结构实现，查询快、增删慢</p></li><li><p>LinkedList集合</p><p>​    底层是链表结构实现，查询慢、增删快</p></li></ul><p>ArrayList特有的常用方法：</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,E   element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int   index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E   element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int   index)</td><td>返回指定索引处的元素</td></tr></tbody></table><p>List中，使用迭代器Iterator可能会导致并发修改异常的情况：</p><ul><li><p>出现的原因</p><p>​    迭代器遍历的过程中，通过集合对象修改了集合中的元素<span style="color:red;font-size:25px"> （添加和删除）</span>，造成了迭代器获取元素中判断预期修改值和实际修改值不一致，则会出现：ConcurrentModificationException</p></li><li><p>解决的方案</p><p>​    用for循环遍历，然后用集合对象做对应的操作即可</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个元素，看有没有"world"这个元素，如果有，我就添加一个"javaee"元素，请写代码实现</span></span><br><span class="line"><span class="comment">//        Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">//        while (it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//            String s = it.next();</span></span><br><span class="line"><span class="comment">//            if(s.equals("world")) &#123;</span></span><br><span class="line"><span class="comment">//                list.add("javaee");</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"world"</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">"javaee"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>列表迭代器</p><ul><li><p>ListIterator介绍</p><ul><li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器</li><li>用于允许程序员沿任一方向遍历的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取列表迭代器</span></span><br><span class="line">        ListIterator&lt;String&gt; lit = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (lit.hasNext()) &#123;</span><br><span class="line">            String s = lit.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">"world"</span>)) &#123;</span><br><span class="line">                lit.add(<span class="string">"javaee"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>LinkedList集合的特有功能</p><ul><li><p>特有方法</p><p>| 方法名                    | 说明                             |<br>| ————————- | ——————————– |<br>| public void addFirst(E e) | 在该列表开头插入指定的元素       |<br>| public void addLast(E e)  | 将指定的元素追加到此列表的末尾   |<br>| public E getFirst()       | 返回此列表中的第一个元素         |<br>| public   E getLast()      | 返回此列表中的最后一个元素       |<br>| public E removeFirst()    | 从此列表中删除并返回第一个元素   |<br>| public   E removeLast()   | 从此列表中删除并返回最后一个元素 |</p></li></ul><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>方法与List接口几乎一模一样。</p><p>主要实现类有HashSet、TreeSet、LinkedHashSet。</p><p>存储的数据是不可重复的、不保证与添加顺序一致的（存取无序）。</p><h2 id="双列集合Map"><a href="#双列集合Map" class="headerlink" title="双列集合Map"></a>双列集合Map</h2><p>Map集合的特点</p><ul><li>键值对映射关系</li><li>一个键对应一个值</li><li>键不能重复，值可以重复</li><li>元素存取无序</li></ul><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V   put(K key,V   value)</td><td>添加元素</td></tr><tr><td>V   remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void   clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td></tr></tbody></table><p>两种遍历方式：</p><ul><li>keySet()</li><li>entrySet()</li></ul><p>Collections工具类常用方法：</p><ul><li>shuffle()</li><li>reverse()</li><li>sort()</li></ul><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>构造方法</p><ul><li>File(String pathname)</li><li>File(String parent , String child)</li><li>File(File parent , String child)</li></ul><p>常用方法</p><ul><li><p>创建文件</p><ul><li>boolean createNewFile()        创建文件</li></ul></li><li><p>创建文件夹</p><ul><li>boolean mkdir()         创建目录</li><li>boolean mkdirs()       创建多级目录</li></ul></li><li><p>判断</p><ul><li>boolean isDirectory()</li><li>boolean isFile()</li><li>boolean exists()</li></ul></li><li><p>获取</p><ul><li>String getAbsolutePath()</li><li>String getPath()</li><li>String getName()</li><li>String[] list   获取当前文件夹下，所有的文件或者单级子文件夹名称数组</li><li>File[] listFiles()  返回一个抽象路径名数组，这些路径名表示此抽象路径名表示的目录中的文件。 </li></ul></li><li><p>删除</p><ul><li>boolean delete()    API中没有直接提供级联删除方法，只提供了这一个删除方法，如果调用此方法的File是非空目录，则会拒绝删除请求，返回false。</li></ul></li></ul><h2 id="IO流的体系【IO重点】"><a href="#IO流的体系【IO重点】" class="headerlink" title="IO流的体系【IO重点】"></a>IO流的体系【IO重点】</h2><blockquote><ul><li>字节流<ul><li>InputStream<ul><li>FileInputStream</li><li>BufferedInputStream</li></ul></li><li>OutputStream<ul><li>FileOutputStream</li><li>BufferedOutputStream</li></ul></li></ul></li><li>字符流<ul><li>Reader<ul><li>InputStreamReader<ul><li>FileReader</li></ul></li><li>BufferedReader</li></ul></li><li>Writer<ul><li>OutputStreamWriter<ul><li>FileWriter</li></ul></li><li>BufferedWriter</li></ul></li></ul></li></ul></blockquote><h2 id="Properties（集合与IO相结合）"><a href="#Properties（集合与IO相结合）" class="headerlink" title="Properties（集合与IO相结合）"></a>Properties（集合与IO相结合）</h2><h3 id="Properties作为Map集合的使用"><a href="#Properties作为Map集合的使用" class="headerlink" title="Properties作为Map集合的使用"></a>Properties作为Map集合的使用</h3><ul><li>Properties介绍<ul><li>是一个Map体系的集合类</li><li>Properties可以保存到流中或从流中加载</li><li>属性列表中的每个键及其对应的值都是一个字符串</li></ul></li></ul><ul><li><p>Properties基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Properties&lt;String,String&gt; prop = new Properties&lt;String,String&gt;(); //错误</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储元素</span></span><br><span class="line">        prop.put(<span class="string">"it001"</span>, <span class="string">"lcw"</span>);</span><br><span class="line">        prop.put(<span class="string">"it002"</span>, <span class="string">"ld"</span>);</span><br><span class="line">        prop.put(<span class="string">"it003"</span>, <span class="string">"lgl"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">            Object value = prop.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">","</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Properties作为Map集合的特有方法"><a href="#Properties作为Map集合的特有方法" class="headerlink" title="Properties作为Map集合的特有方法"></a>Properties作为Map集合的特有方法</h3><ul><li><p>特有方法</p><p>| 方法名                                         | 说明                                                         |<br>| ———————————————- | ———————————————————— |<br>| Object   setProperty(String key, String value) | 设置集合的键和值，都是String类型，底层调用   Hashtable方法 put |<br>| String   getProperty(String key)               | 使用此属性列表中指定的键搜索属性                             |<br>| Set<string>   stringPropertyNames()            | 从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串 |</string></p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object setProperty(String key, String value)：设置集合的键和值，都是String类型，底层调用Hashtable方法put</span></span><br><span class="line">        prop.setProperty(<span class="string">"it001"</span>, <span class="string">"lcw"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Object setProperty(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">                return put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Object put(Object key, Object value) &#123;</span></span><br><span class="line"><span class="comment">                return map.put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prop.setProperty(<span class="string">"it002"</span>, <span class="string">"ld"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"it003"</span>, <span class="string">"lgl"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getProperty(String key)：使用此属性列表中指定的键搜索属性</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty("it001"));</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty("it0011"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(prop);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span></span><br><span class="line">        Set&lt;String&gt; names = prop.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : names) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line">            String value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key + <span class="string">","</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Properties和IO流相结合的方法"><a href="#Properties和IO流相结合的方法" class="headerlink" title="Properties和IO流相结合的方法"></a>Properties和IO流相结合的方法</h3><ul><li><p>和IO流结合的方法</p><p>| 方法名                                          | 说明                                                         |<br>| ———————————————– | ———————————————————— |<br>| void   load(InputStream inStream)               | 从输入字节流读取属性列表（键和元素对）                       |<br>| void   load(Reader reader)                      | 从输入字符流读取属性列表（键和元素对）                       |<br>| void   store(OutputStream out, String comments) | 将此属性列表（键和元素对）写入此   Properties表中，以适合于使用   load(InputStream)方法的格式写入输出字节流 |<br>| void   store(Writer writer, String comments)    | 将此属性列表（键和元素对）写入此   Properties表中，以适合使用   load(Reader)方法的格式写入输出字符流 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//把集合中的数据保存到文件</span></span><br><span class="line"><span class="comment">//        myStore();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把文件中的数据加载到集合</span></span><br><span class="line">        myLoad();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void load(Reader reader)：</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"myOtherStream\\fw.txt"</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">"it001"</span>,<span class="string">"lcw"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"it002"</span>,<span class="string">"ld"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"it003"</span>,<span class="string">"lgl"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void store(Writer writer, String comments)：</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"myOtherStream\\fw.txt"</span>);</span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="游戏次数案例"><a href="#游戏次数案例" class="headerlink" title="游戏次数案例"></a>游戏次数案例</h3><ul><li><p>案例需求</p><ul><li>实现猜数字小游戏只能试玩3次，如果还想玩，提示：游戏试玩已结束，想玩请充值(<a href="http://www.skywalkerkkkk.cn" target="_blank" rel="noopener">www.skywalkerkkkk.cn</a>)</li></ul></li><li><p>分析步骤</p><ol><li><p>写一个游戏类，里面有一个猜数字的小游戏</p></li><li><p>写一个测试类，测试类中有main()方法，main()方法中写如下代码：</p><p>​    从文件中读取数据到Properties集合，用load()方法实现</p><pre><code>文件已经存在：game.txt里面有一个数据值：count=0</code></pre><p>​    通过Properties集合获取到玩游戏的次数</p><p>​    判断次数是否到到3次了</p><pre><code>如果到了，给出提示：游戏试玩已结束，想玩请充值(www.skywalkerkkkk.cn)如果不到3次：    次数+1，重新写回文件，用Properties的store()方法实现玩游戏</code></pre></li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从文件中读取数据到Properties集合，用load()方法实现</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"myOtherStream\\game.txt"</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties集合获取到玩游戏的次数</span></span><br><span class="line">        String count = prop.getProperty(<span class="string">"count"</span>);</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数是否到到3次了</span></span><br><span class="line">        <span class="keyword">if</span>(number &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//如果到了，给出提示：游戏试玩已结束，想玩请充值(www.skywalkerkkkk.cn)</span></span><br><span class="line">            System.out.println(<span class="string">"游戏试玩已结束，想玩请充值(www.skywalkerkkkk.cn)"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//玩游戏</span></span><br><span class="line">            GuessNumber.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//次数+1，重新写回文件，用Properties的store()方法实现</span></span><br><span class="line">            number++;</span><br><span class="line">            prop.setProperty(<span class="string">"count"</span>,String.valueOf(number));</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"myOtherStream\\game.txt"</span>);</span><br><span class="line">            prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象序列化流"><a href="#对象序列化流" class="headerlink" title="对象序列化流"></a>对象序列化流</h2><ul><li><p>对象序列化介绍</p><ul><li>对象序列化：就是将对象保存到磁盘中，或者在网络中传输对象</li><li>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</li><li>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</li><li>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</li></ul></li><li><p>对象序列化流： ObjectOutputStream</p><ul><li>将Java对象的原始数据类型和图形写入OutputStream。 可以使用ObjectInputStream读取（重构）对象。 可以通过使用流的文件来实现对象的持久存储。 如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象 </li></ul></li><li><p>构造方法</p><p>| 方法名                               | 说明                                               |<br>| ———————————— | ————————————————– |<br>| ObjectOutputStream(OutputStream out) | 创建一个写入指定的OutputStream的ObjectOutputStream |</p></li><li><p>序列化对象的方法</p><p>| 方法名                       | 说明                               |<br>| —————————- | ———————————- |<br>| void writeObject(Object obj) | 将指定的对象写入ObjectOutputStream |</p></li><li><p>示例代码</p><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"myOtherStream\\oos.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"lcw"</span>,<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><ul><li>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</li><li>Serializable是一个标记接口，实现该接口，不需要重写任何方法</li></ul></li></ul><h2 id="对象反序列化流"><a href="#对象反序列化流" class="headerlink" title="对象反序列化流"></a>对象反序列化流</h2><ul><li><p>对象反序列化流： ObjectInputStream</p><ul><li>ObjectInputStream反序列化先前使用ObjectOutputStream编写的原始数据和对象</li></ul></li><li><p>构造方法</p><p>| 方法名                            | 说明                                           |<br>| ——————————— | ———————————————- |<br>| ObjectInputStream(InputStream in) | 创建从指定的InputStream读取的ObjectInputStream |</p></li><li><p>反序列化对象的方法</p><p>| 方法名              | 说明                            |<br>| ——————- | ——————————- |<br>| Object readObject() | 从ObjectInputStream读取一个对象 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"myOtherStream\\oos.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject()：从ObjectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="serialVersionUID-amp-transient"><a href="#serialVersionUID-amp-transient" class="headerlink" title="serialVersionUID&amp;transient"></a>serialVersionUID&amp;transient</h2><ul><li><p>serialVersionUID</p><ul><li>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题呢？<ul><li>会出问题，会抛出InvalidClassException异常</li></ul></li><li>如果出问题了，如何解决呢？<ul><li>重新序列化</li><li>给对象所属的类加一个serialVersionUID <ul><li>private static final long serialVersionUID = 42L;</li></ul></li></ul></li></ul></li><li><p>transient</p><ul><li>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢？<ul><li>给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li></ul></li></ul></li><li><p>示例代码</p><ul><li><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    private int age;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return "Student&#123;" +</span></span><br><span class="line"><span class="comment">//                "name='" + name + '\'' +</span></span><br><span class="line"><span class="comment">//                ", age=" + age +</span></span><br><span class="line"><span class="comment">//                '&#125;';</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        write();</span></span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"myOtherStream\\oos.txt"</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"myOtherStream\\oos.txt"</span>));</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"lcw"</span>, <span class="number">30</span>);</span><br><span class="line">        oos.writeObject(s);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul><li><p>概念：</p><ul><li>进程：正在运行的应用程序</li><li>线程：是进程中的单个顺序控制流，是一条执行路径</li></ul></li></ul><h2 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h2><h3 id="实现多线程方式一：继承Thread类"><a href="#实现多线程方式一：继承Thread类" class="headerlink" title="实现多线程方式一：继承Thread类"></a>实现多线程方式一：继承Thread类</h3><ul><li><p>方法介绍</p><p>| 方法名       | 说明                                        |<br>| ———— | ——————————————- |<br>| void run()   | 在线程开启后，此方法将被调用执行            |<br>| void start() | 使此线程开始执行，Java虚拟机会调用run方法() |</p></li><li><p>实现步骤</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类的对象</li><li>启动线程</li></ul></li></ul><h3 id="实现多线程方式二：实现Runnable接口"><a href="#实现多线程方式二：实现Runnable接口" class="headerlink" title="实现多线程方式二：实现Runnable接口"></a>实现多线程方式二：实现Runnable接口</h3><ul><li><p>Thread构造方法</p><p>| 方法名                               | 说明                   |<br>| ———————————— | ———————- |<br>| Thread(Runnable target)              | 分配一个新的Thread对象 |<br>| Thread(Runnable target, String name) | 分配一个新的Thread对象 |</p></li><li><p>实现步骤</p><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul></li></ul><h3 id="设置和获取线程名称"><a href="#设置和获取线程名称" class="headerlink" title="设置和获取线程名称"></a>设置和获取线程名称</h3><ul><li><p>方法介绍</p><p>| 方法名                     | 说明                               |<br>| ————————– | ———————————- |<br>| void  setName(String name) | 将此线程的名称更改为等于参数name   |<br>| String  getName()          | 返回此线程的名称                   |<br>| Thread  currentThread()    | 返回对当前正在执行的线程对象的引用 |</p></li></ul><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul><li><p>线程调度</p><ul><li><p>两种调度方式</p><ul><li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li></ul></li><li><p>Java使用的是抢占式调度模型</p></li><li><p>随机性</p><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</p></li></ul></li><li><p>优先级相关方法</p><p>| 方法名                                  | 说明                                                         |<br>| ————————————— | ———————————————————— |<br>| final int getPriority()                 | 返回此线程的优先级                                           |<br>| final void setPriority(int newPriority) | 更改此线程的优先级。线程默认优先级是5；线程优先级的范围是：1-10 |</p></li></ul><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><ul><li><p>相关方法</p><p>| 方法名                         | 说明                                                         |<br>| —————————— | ———————————————————— |<br>| static void sleep(long millis) | 使当前正在执行的线程停留（暂停执行）指定的毫秒数             |<br>| void join()                    | 等待这个线程死亡（如果某个线程调用了此方法，则其他并发的线程必须等待这个线程死亡后才有机会调用） |<br>| void setDaemon(boolean on)     | 将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出 |</p></li></ul><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="..\images\线程生命周期.jpg" alt="线程生命周期"></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="卖票"><a href="#卖票" class="headerlink" title="卖票"></a>卖票</h3><ul><li><p>案例需求</p><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p></li><li><p>实现步骤</p><ul><li>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets = 100;</li><li>在SellTicket类中重写run()方法实现卖票，代码步骤如下</li><li>判断票数大于0，就卖票，并告知是哪个窗口卖的</li><li>卖了票之后，总票数要减1</li><li>票没有了，也可能有人来问，所以这里用死循环让卖票的动作一直执行</li><li>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</li><li>创建SellTicket类的对象</li><li>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</li><li>启动线程</li></ul></li></ul><h3 id="卖票案例的问题"><a href="#卖票案例的问题" class="headerlink" title="卖票案例的问题"></a>卖票案例的问题</h3><ul><li><p>卖票出现了问题</p><ul><li>相同的票出现了多次</li><li>出现了负数的票</li></ul></li><li><p>问题产生原因</p><p>线程执行的随机性导致的</p></li></ul><h1 id="网络编程入门"><a href="#网络编程入门" class="headerlink" title="网络编程入门"></a>网络编程入门</h1><h2 id="网络编程概述"><a href="#网络编程概述" class="headerlink" title="网络编程概述"></a>网络编程概述</h2><ul><li><p>计算机网络</p><p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p></li><li><p>网络编程</p><p>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</p></li></ul><h3 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h3><ul><li><p>IP地址</p><p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p></li><li><p>端口</p><p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p></li><li><p>协议</p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p></li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP地址：是网络中设备的唯一标识</p><ul><li>IP地址分为两大类<ul><li>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照TCP/IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”，这显然比1和0容易记忆得多</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量不够的问题</li></ul></li><li>DOS常用命令：<ul><li>ipconfig：查看本机IP地址</li><li>ping IP地址：检查网络是否连通</li></ul></li><li>特殊IP地址：<ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></li></ul><h3 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h3><p>InetAddress：此类表示Internet协议（IP）地址</p><ul><li><p>相关方法</p><p>| 方法名                                    | 说明                                                         |<br>| —————————————– | ———————————————————— |<br>| static InetAddress getByName(String host) | 确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址 |<br>| String getHostName()                      | 获取此IP地址的主机名                                         |<br>| String getHostAddress()                   | 返回文本显示中的IP地址字符串                                 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line"><span class="comment">//InetAddress address = InetAddress.getByName("skywalker");</span></span><br><span class="line">        InetAddress address = InetAddress.getByName(<span class="string">"192.168.1.66"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String getHostName()：获取此IP地址的主机名</span></span><br><span class="line">        String name = address.getHostName();</span><br><span class="line">        <span class="comment">//public String getHostAddress()：返回文本显示中的IP地址字符串</span></span><br><span class="line">        String ip = address.getHostAddress();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"主机名："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"IP地址："</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="端口和协议"><a href="#端口和协议" class="headerlink" title="端口和协议"></a>端口和协议</h3><ul><li><p>端口</p><ul><li>设备上应用程序的唯一标识</li></ul></li><li><p>端口号</p><ul><li>用两个字节表示的整数，它的取值范围是0~65535。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</li></ul></li><li><p>协议</p><ul><li>计算机网络中，连接和通信的规则被称为网络通信协议</li></ul></li><li><p>UDP协议</p><ul><li>用户数据报协议(User Datagram Protocol)</li><li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li><li>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li></ul></li><li><p>TCP协议</p><ul><li><p>传输控制协议 (Transmission Control Protocol)</p></li><li><p>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</p></li><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠</p><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</p><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</p><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接</p></li><li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p></li></ul></li></ul><h2 id="UDP通信程序"><a href="#UDP通信程序" class="headerlink" title="UDP通信程序"></a>UDP通信程序</h2><h3 id="UDP发送数据"><a href="#UDP发送数据" class="headerlink" title="UDP发送数据"></a>UDP发送数据</h3><ul><li><p>Java中的UDP通信</p><ul><li>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</li><li>Java提供了DatagramSocket类作为基于UDP协议的Socket</li></ul></li><li><p>构造方法</p><p>| 方法名                                                      | 说明                                                 |<br>| ———————————————————– | —————————————————- |<br>| DatagramSocket()                                            | 创建数据报套接字并将其绑定到本机地址上的任何可用端口 |<br>| DatagramPacket(byte[] buf,int len,InetAddress add,int port) | 创建数据包,发送长度为len的数据包到指定主机的指定端口 |</p></li><li><p>相关方法</p><p>| 方法名                         | 说明                   |<br>| —————————— | ———————- |<br>| void send(DatagramPacket p)    | 发送数据报包           |<br>| void close()                   | 关闭数据报套接字       |<br>| void receive(DatagramPacket p) | 从此套接字接受数据报包 |</p></li><li><p>发送数据的步骤</p><ul><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包</li><li>调用DatagramSocket对象的方法发送数据</li><li>关闭发送端</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span></span><br><span class="line">        <span class="comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">"hello,udp,我来了"</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length,InetAddress.getByName(<span class="string">"192.168.1.66"</span>),<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        <span class="comment">//void send(DatagramPacket p) 从此套接字发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        <span class="comment">//void close() 关闭此数据报套接字</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="UDP接收数据"><a href="#UDP接收数据" class="headerlink" title="UDP接收数据"></a>UDP接收数据</h3><ul><li><p>接收数据的步骤</p><ul><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ul></li><li><p>构造方法</p><p>| 方法名                              | 说明                                            |<br>| ———————————– | ———————————————– |<br>| DatagramPacket(byte[] buf, int len) | 创建一个DatagramPacket用于接收长度为len的数据包 |</p></li><li><p>相关方法</p><p>| 方法名            | 说明                                     |<br>| —————– | —————————————- |<br>| byte[]  getData() | 返回数据缓冲区                           |<br>| int  getLength()  | 返回要发送的数据的长度或接收的数据的长度 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">"数据是："</span> + <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>,                                             dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="UDP通信程序练习"><a href="#UDP通信程序练习" class="headerlink" title="UDP通信程序练习"></a>UDP通信程序练习</h3><ul><li><p>案例需求</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</p><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP发送数据：</span></span><br><span class="line"><span class="comment">        数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//自己封装键盘录入数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//输入的数据是886，发送数据结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"886"</span>.equals(line)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = line.getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length, InetAddress.getByName(<span class="string">"192.168.1.66"</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP接收数据：</span></span><br><span class="line"><span class="comment">        因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">"数据是："</span> + <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭接收端</span></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="TCP通信程序"><a href="#TCP通信程序" class="headerlink" title="TCP通信程序"></a>TCP通信程序</h2><h3 id="TCP发送数据"><a href="#TCP发送数据" class="headerlink" title="TCP发送数据"></a>TCP发送数据</h3><ul><li><p>Java中的TCP通信</p><ul><li>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</li><li>Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</li></ul></li><li><p>构造方法</p><p>| 方法名                               | 说明                                           |<br>| ———————————— | ———————————————- |<br>| Socket(InetAddress address,int port) | 创建流套接字并将其连接到指定IP指定端口号       |<br>| Socket(String host, int port)        | 创建流套接字并将其连接到指定主机上的指定端口号 |</p></li><li><p>相关方法</p><p>| 方法名                         | 说明                 |<br>| —————————— | ——————– |<br>| InputStream  getInputStream()  | 返回此套接字的输入流 |<br>| OutputStream getOutputStream() | 返回此套接字的输出流 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端的Socket对象(Socket)</span></span><br><span class="line">        <span class="comment">//Socket(String host, int port) 创建流套接字并将其连接到指定主机上的指定端口号</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"192.168.1.66"</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输出流，写数据</span></span><br><span class="line">        <span class="comment">//OutputStream getOutputStream() 返回此套接字的输出流</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"hello,tcp,我来了"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="TCP接收数据"><a href="#TCP接收数据" class="headerlink" title="TCP接收数据"></a>TCP接收数据</h3><ul><li><p>构造方法</p><p>| 方法名                  | 说明                             |<br>| ———————– | ——————————– |<br>| ServletSocket(int port) | 创建绑定到指定端口的服务器套接字 |</p></li><li><p>相关方法</p><p>| 方法名          | 说明                           |<br>| ————— | —————————— |<br>| Socket accept() | 监听要连接到此的套接字并接受它 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器端的Socket对象(ServerSocket)</span></span><br><span class="line">        <span class="comment">//ServerSocket(int port) 创建绑定到指定端口的服务器套接字</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket accept() 侦听要连接到此套接字并接受它</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流，读数据，并把数据显示在控制台</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys,<span class="number">0</span>,len);</span><br><span class="line">        System.out.println(<span class="string">"数据是："</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="TCP通信程序练习"><a href="#TCP通信程序练习" class="headerlink" title="TCP通信程序练习"></a>TCP通信程序练习</h3><ul><li><p>案例需求</p><p>客户端：数据来自于文本文件，接收服务器反馈</p><p>服务器：接收到的数据写入文本文件，给出反馈，代码用线程进行封装，为每一个客户端开启一个线程</p></li><li><p>案例分析</p><ul><li>创建客户端对象，创建输入流对象指向文件，每读入一行数据就给服务器输出一行数据，输出结束后使用shutdownOutput()方法告知服务端传输结束</li><li>创建多线程类，在run()方法中读取客户端发送的数据，为了防止文件重名，使用计数器给文件名编号，接受结束后使用输出流给客户端发送反馈信息。</li><li>创建服务端对象，每监听到一个客户端则开启一个新的线程接受数据。</li><li>客户端接受服务端的回馈信息</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">"192.168.1.66"</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装文本文件的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"myNet\\InetAddressDemo.java"</span>));</span><br><span class="line">        <span class="comment">//封装输出流写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收反馈</span></span><br><span class="line">        BufferedReader brClient = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String data = brClient.readLine(); <span class="comment">//等待读取数据</span></span><br><span class="line">        System.out.println(<span class="string">"服务器的反馈："</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//接收数据写到文本文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            <span class="comment">//解决名称冲突问题</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"myNet\\Copy["</span>+count+<span class="string">"].java"</span>);</span><br><span class="line">            <span class="keyword">while</span> (file.exists()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                file = <span class="keyword">new</span> File(<span class="string">"myNet\\Copy["</span>+count+<span class="string">"].java"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(line);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给出反馈</span></span><br><span class="line">            BufferedWriter bwServer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">            bwServer.write(<span class="string">"文件上传成功"</span>);</span><br><span class="line">            bwServer.newLine();</span><br><span class="line">            bwServer.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//监听客户端连接，返回一个对应的Socket对象</span></span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            <span class="comment">//为每一个客户端开启一个线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServerThread(s)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Lambda-amp-方法引用"><a href="#Lambda-amp-方法引用" class="headerlink" title="Lambda&amp;方法引用"></a>Lambda&amp;方法引用</h1><ul><li>Lambda表达式为<span style="color:red">JDK1.8的新特性</span>。</li></ul><p>Lambda表达式：简化匿名内部类的一种方式，只能用于<span style="color:red">有且只有一个抽象方法的接口。</span></p><p>由这三部分组成：<span style="color:red">(形式参数) -&gt; {代码块}</span></p><ul><li><p>(形式参数):  括号中是参数列表，如果是空参方法，不需要传参。比如Runnable接口中的run()方法。</p><p><span style="color:red">参数类型可以省略，但是有多个参数的情况下，不能只省略一个</span>。</p><p>而且，如果参数<span style="color:red">有且只有一个</span>那么小括号可以省略。</p></li><li><p>-&gt;:  固定用法，表示传递</p></li><li><p>{代码块}:  重写的方法的方法体</p><p><span style="color:red;">如果代码块的语句只有一条，可以省略大括号和分号（如果有return，return也得省略掉）</span></p></li></ul><h1 id="接口新特性"><a href="#接口新特性" class="headerlink" title="接口新特性"></a>接口新特性</h1><ul><li><p>静态方法（JDK1.8）</p><ul><li><p>格式</p><p>public static 返回值类型 方法名(参数列表) {   }</p></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li><li>public可以省略，static不能省略</li></ul></li></ul></li></ul><ul><li><p>默认方法（JDK1.8）</p><ul><li><p>格式</p><p>public default 返回值类型 方法名(参数列表) {   }</p></li><li><p>范例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字</li><li>public可以省略，default不能省略</li></ul></li></ul></li></ul><ul><li><p>私有方法（JDK1.9）</p><ul><li><p>主要作用：抽取接口中共性的代码</p></li><li><p>私有方法产生原因</p><p>Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是Java 9增加私有方法的必然性</p></li><li><p>定义格式</p><ul><li><p>格式1</p><p>private 返回值类型 方法名(参数列表) {   }</p></li><li><p>范例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式2</p><p>private static 返回值类型 方法名(参数列表) {   }</p></li><li><p>范例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意事项</p><ul><li>默认方法可以调用私有的静态方法和非静态方法</li><li>静态方法只能调用私有的静态方法</li></ul></li></ul></li></ul><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>@FunctionalInterface注解：用于检测一个接口是否是函数式接口。</p><p>常用的函数式接口：</p><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><ul><li>属于生产型接口。</li><li>接口中只有一个方法 T get();        获得结果。</li></ul><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><ul><li>属于消费型接口</li><li>接口中有两个方法：<ul><li>void  accept(T t);        对给定的参数执行此操作。</li><li>default Consumer<t>    andThen(Consumer &lt;? super T&gt;  after);       返回一个组合的 Consumer ，按顺序执行该操作，然后执行 after操作。 </t></li></ul></li></ul><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><ul><li>表示一个参数的谓词（布尔值函数）。 </li><li>五个常用方法，其中<strong><em>boolean test( T  t )</em></strong>是该FunctionalInterface的功能方法</li></ul><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>default Predicate&lt;T&gt;</code></td><td><code>and(Predicate&lt;? super T&gt; other)</code>  返回一个组合的谓词，表示该谓词与另一个谓词的短路逻辑AND。</td></tr><tr><td><code>static &lt;T&gt; Predicate&lt;T&gt;</code></td><td><code>isEqual(Object targetRef)</code>  返回根据 <code>Objects.equals(Object, Object)</code>测试两个参数是否相等的 <a href="../../../java/util/Objects.html#equals-java.lang.Object-java.lang.Object-">谓词</a>  。</td></tr><tr><td><code>default Predicate&lt;T&gt;</code></td><td><code>negate()</code>   返回表示此谓词的逻辑否定的谓词。</td></tr><tr><td><code>default Predicate&lt;T&gt;</code></td><td><code>or(Predicate&lt;? super T&gt; other)</code>  返回一个组合的谓词，表示该谓词与另一个谓词的短路逻辑或。</td></tr><tr><td><code>boolean</code></td><td><code>test(T t)</code>  在给定的参数上评估这个谓词。</td></tr></tbody></table><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li>表示接受一个参数并产生结果的函数。 </li></ul><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>default &lt;V&gt; Function&lt;T,V&gt;</code></td><td><code>andThen(Function&lt;? super R,? extends  V&gt; after)</code>  返回一个组合函数，首先将该函数应用于其输入，然后将 <code>after</code>函数应用于结果。</td></tr><tr><td><code>R</code></td><td><code>apply(T t)</code>  将此函数应用于给定的参数。</td></tr><tr><td><code>default &lt;V&gt; Function&lt;V,R&gt;</code></td><td><code>compose(Function&lt;? super V,?  extends T&gt; before)</code>  返回一个组合函数，首先将 <code>before</code>函数应用于其输入，然后将此函数应用于结果。</td></tr><tr><td><code>static &lt;T&gt; Function&lt;T,T&gt;</code></td><td><code>identity()</code>   返回一个总是返回其输入参数的函数。</td></tr></tbody></table><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p> 类似于车间的生产线，可以更加方便的对集合或者数组中的元素进行操作</p><ul><li><p>操作步骤</p><pre><code>1、根据数据源（集合或者数组）生成Stream流对象2、流操作（使用Stream接口中的方法）</code></pre></li><li><p>如何将集合或者数组转为Stream流对象（集合/数组-&gt;Stream流）</p><ul><li><p>单列集合<br>通过Collection接口的默认方法stream()，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Stream&lt;String&gt; listStream = list.stream();</span><br><span class="line">    </span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">    Stream&lt;String&gt; setStream = set.stream();</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>双列集合<br>不能直接转为Stream流对象，需要先转为单列集合，然后再调用stream()方法转为流对象，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">  Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line"></span><br><span class="line">  Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class="line"></span><br><span class="line">  Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数组<br>通过Stream接口的静态方法of(T… values)，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  String[] strArray = &#123;<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"java"</span>&#125;;</span><br><span class="line">  Stream&lt;String&gt; strArrayStream = Stream.of(strArray);</span><br><span class="line">  或者</span><br><span class="line">Stream&lt;String&gt; strArrayStream2 = Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"java"</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Stream接口中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">延迟方法（中间操作）：如果一个方法的返回还是Stream流对象，则称之为延迟方法</span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span>：用于过滤流中不满足条件的数据</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> n)</span> :截取流中的前n个数据</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span>：跳过流中的前n个数据，截取剩余的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream a, Stream b)</span>：用于合并两个流</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">distinct</span><span class="params">()</span> ：将流中重复的元素去除</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">sorted</span><span class="params">()</span>：按照自然顺序对流中的数据进行排序</span></span><br><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">sorted</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span>:按照指定的比较器规则对流中的数据进行排序</span></span><br><span class="line"><span class="function">&lt;R&gt; Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span> ：将流中的元素从一种类型转换为另一种类型的数据</span></span><br><span class="line"><span class="function">IntStream <span class="title">mapToInt</span><span class="params">(ToIntFunction&lt;? <span class="keyword">super</span> T&gt; mapper)</span> :将流中的数据转为<span class="keyword">int</span>类型返回一个新的流（IntStream）</span></span><br><span class="line"><span class="function">&lt;R, A&gt; R <span class="title">collect</span><span class="params">(Collector&lt;? <span class="keyword">super</span> T, A, R&gt; collector)</span> ：将流中的数据收集到集合中</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">终结方法（终结操作）：如果一个方法的返回不是Stream流对象，则称之为终结方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> ：用于遍历流中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span>：用于统计流中数据的个数</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>Stream流的收集（Stream流-&gt;集合/数组）<br>收集到集合<pre><code>收集到List集合    stream.collect(Collectors.toList());    比如：    List&lt;String&gt; names = listStream.collect(Collectors.toList());收集到Set集合    stream.collect(Collectors.toSet());    比如：    Set&lt;Integer&gt; ages = setStream.collect(Collectors.toSet());收集到Map集合    stream.collect(Collectors.toMap(Function fun1,Function fun2));    比如：    Map&lt;String, Integer&gt; map = arrayStream.collect(Collectors.toMap(                s -&gt; s.split(&quot;,&quot;)[0],                s -&gt; Integer.parseInt(s.split(&quot;,&quot;)[1])            )    );</code></pre></li></ul><ul><li><p>收集到数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"java"</span>, <span class="string">"php"</span>, <span class="string">"mysql"</span>);</span><br><span class="line"><span class="comment">// 只要后三个元素</span></span><br><span class="line">Stream&lt;String&gt; skipStream = stream.skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//String[] strings = skipStream.toArray(length-&gt;new String[length]);</span></span><br><span class="line">String[] strings = skipStream.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><ul><li>类加载的描述<ul><li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</li></ul></li><li>类的加载<ul><li>就是指将class文件读入内存，并为之创建一个 java.lang.Class 对象</li><li>任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</li></ul></li><li>类的连接<ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li>类的初始化<ul><li>在该阶段，主要就是对类变量进行初始化</li></ul></li><li>类的初始化步骤<ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li><li>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li></ul></li><li>类的初始化时机<ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li></ul><h2 id="类加载器-1"><a href="#类加载器-1" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><ul><li>负责将.class文件加载到内存中，并为之生成对应的 java.lang.Class 对象。虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行！</li></ul><h3 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h3><ul><li>全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li></ul><h3 id="Java中的内置类加载器"><a href="#Java中的内置类加载器" class="headerlink" title="Java中的内置类加载器"></a>Java中的内置类加载器</h3><ul><li>Bootstrap class loader：它是虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器可以看到所有平台类 ，平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类</li><li>System class loader：它也被称为应用程序类加载器 ，与平台类加载器不同。 系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类</li><li>类加载器的继承关系：System的父加载器为Platform，而Platform的父加载器为Bootstrap</li></ul><h3 id="ClassLoader-中的两个方法"><a href="#ClassLoader-中的两个方法" class="headerlink" title="ClassLoader 中的两个方法"></a>ClassLoader 中的两个方法</h3><ul><li><p>方法分类</p><p>| 方法名                                    | 说明                       |<br>| —————————————– | ————————– |<br>| static ClassLoader getSystemClassLoader() | 返回用于委派的系统类加载器 |<br>| ClassLoader getParent()                   | 返回父类加载器进行委派     |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemClassLoader()：返回用于委派的系统类加载器</span></span><br><span class="line">        ClassLoader c = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(c); <span class="comment">//AppClassLoader</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ClassLoader getParent()：返回父类加载器进行委派</span></span><br><span class="line">        ClassLoader c2 = c.getParent();</span><br><span class="line">        System.out.println(c2); <span class="comment">//PlatformClassLoader</span></span><br><span class="line"></span><br><span class="line">        ClassLoader c3 = c2.getParent();</span><br><span class="line">        System.out.println(c3); <span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li><p>概念</p><p>将类封装成一个Class对象，然后将类的各个组成部分也封装成对象，然后在运行阶段可以获取各个组成部分并且操作它们。</p><p>成员变量        -&gt;    Filed类</p><p>构造方法        -&gt;    Constructor类</p><p>成员方法        -&gt;    Method类</p><p>反射称之为Java中的解剖学，反射相当于是对Java中的类进行解剖</p></li><li><p>获取Class对象</p><ul><li><p>类名.class</p><p>比如：<code>Class clazz = Student.class;</code></p></li><li><p>对象名.getClass()</p><p>比如：<code>Class clazz = stu.getClass();</code></p></li><li><p>Class.forName(“全类名”)</p><p>比如：<code>Class.forName(&quot;cn.skywalker.Student&quot;);</code></p></li></ul><p>以上三种方式获取的字节码对象是同一个。</p></li></ul><ul><li>Class类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span>：获取指定参数的<span class="keyword">public</span>修饰的构造方法</span></span><br><span class="line"><span class="function">   Constructor&lt;?&gt;[] <span class="title">getConstructors</span><span class="params">()</span>：获取所有<span class="keyword">public</span>修饰的构造方法</span></span><br><span class="line"><span class="function">   Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;... parameterTypes)</span>  ：获取指定参数的构造方法，权限修饰符不限</span></span><br><span class="line"><span class="function">   Constructor&lt;?&gt;[] <span class="title">getDeclaredConstructors</span><span class="params">()</span>  ：获取所有的构造方法，权限修饰符不限</span></span><br><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">()</span>  ：使用空参构造创建对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   Field <span class="title">getField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   Field[] <span class="title">getFields</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">   Field[] <span class="title">getDeclaredFields</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">   Method[] <span class="title">getMethods</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">   Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>Constructor类</p><ul><li><p>如何获取</p></li><li><p>如何操作</p><p>public修饰的构造方法<br>使用空参构造创建对象<br>方式一：<br>（1）获取字节码对象（Class对象）<br>（2）调用Class类中的getConstructor()方法获取Constructor对象<br>（3）调用Constructor类中的newInstance()方法创建对象</p><p>Class&lt;?&gt; c = Class.forName(“com.itheima_02.Student”);<br>Constructor&lt;?&gt; con = c.getConstructor();<br>Object obj = con.newInstance();</p><p>方式二：<br>（1）获取字节码对象（Class对象）<br>（2）调用Class类中的newInstance()方法创建对象</p><p> Class&lt;?&gt; clazz = Class.forName(“com.myReflect.itheima_02.Student”);</p><pre><code>         Object obj = clazz.newInstance();使用有参构造创建对象    （1）获取字节码对象（Class对象）    （2）调用Class类中的getConstructor(参数类型)方法获取Constructor对象    （3）调用Constructor类中的newInstance(实参)方法创建对象</code></pre><p>Class&lt;?&gt; c = Class.forName(“com.itheima_02.Student”);<br>Constructor&lt;?&gt; con = c.getConstructor(String.class, int.class, String.class);<br>Object obj = con.newInstance(“林青霞”, 30, “西安”);</p><p>非public修饰的构造方法<br>（1）获取字节码对象（Class对象）<br>（2）调用Class类中的getDeclaredConstructor(参数类型)方法获取Constructor对象<br>（3）调用Constructor类中的setAccessible(true)方法<br>（4）调用Constructor类中的newInstance(实参)方法创建对象</p><p>​                 </p></li></ul></li></ul><ul><li><p>Filed类</p><ul><li><p>如何获取</p></li><li><p>如何操作</p><p>1、获取Class对象</p><p>2、使用Class类中的getField(String name)获取指定的成员变量的Field对象</p><p>3、反射创建对象</p><p>4、调用Field类中的set给指定对象的该成员变量赋指定的值</p></li></ul></li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><ul><li><p>在不同模块之间建立模块依赖关系，可以使用不同模块的资源。</p><ul><li><p>使用不同模块的类：</p><ul><li>exports 包名;</li><li>requires 模块名;</li></ul></li><li><p>使用不同模块提供的接口（包含实现类，主要思想是面向接口编程）服务：</p><blockquote><p>提供服务端：</p></blockquote><ul><li>exports 接口所在的包;</li><li>provides 接口名 with 实现类名;</li></ul><blockquote><p>使用服务端：</p></blockquote><ul><li>uses 接口名;（使用编译器会自动帮你导包）</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/markdown/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/markdown/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><hr><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><a id="more"></a><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li style="list-style: none"><input type="checkbox"> 支持以 PDF 格式导出文稿</li><li style="list-style: none"><input type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li style="list-style: none"><input type="checkbox" checked> 新增 Todo 列表功能</li><li style="list-style: none"><input type="checkbox" checked> 修复 LaTex 公式渲染问题</li><li style="list-style: none"><input type="checkbox" checked> 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><hr><p>再一次感谢您花费时间阅读，祝您在这里记录、阅读、分享愉快！</p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -markdown -笔记 -工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS</title>
      <link href="/HTML-CSS/HTML-CSS/"/>
      <url>/HTML-CSS/HTML-CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><ul><li>C/S（Client/Server）：客户端/服务器端<ul><li>在用户本地有一个客户端程序，在远程有一个服务器端程序</li><li>如：QQ，迅雷…</li><li>优点<ul><li>用户体验好</li></ul></li><li>缺点<ul><li>开发、安装、部署、维护麻烦</li></ul></li></ul></li><li>B/S（Browser/Server）：浏览器/服务器端<ul><li>只需要一个浏览器，用户通过不同的网址（URL），客户访问不同的服务器端程序</li><li>优点<ul><li>开发、安装、部署、维护简单</li></ul></li><li>缺点<ul><li>如果应用过大，用户的体验可能会受到影响</li><li>对硬件要求过高</li></ul></li></ul></li></ul><h1 id="B-S架构详解"><a href="#B-S架构详解" class="headerlink" title="B/S架构详解"></a>B/S架构详解</h1><ul><li><p>资源分类：</p><ol><li><p>静态资源</p><ul><li><p>使用静态网页开发技术发布的资源。</p></li><li><p>特点：</p><ul><li><p>所有用户访问，得到的结果是一样的。</p></li><li><p>如：文本，图片，音频，视频，HTML，CSS，JavaScript</p></li><li><p>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</p></li></ul></li></ul></li><li><p>动态资源</p><ul><li>使用动态网页及时发布的资源。</li><li>特点：<ul><li>所有用户访问，得到的结果可能不一样</li><li>如：jsp/servlet，php，asp…</li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul></li></ul></li></ol></li></ul><p>我们要学习动态资源，必须先学习静态资源！</p><p>静态资源：</p><ul><li>HTML：用于搭建基础网页，展示页面的内容</li><li>CSS：用于美化页面，布局页面</li><li>JavaScript：控制页面的元素，让页面有一些动态的效果</li></ul><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li><p>概念：是最基础的网页开发语言</p><ul><li>Hyper Text Markup Language 超文本标记语言<ul><li>超文本：超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</li><li>标记语言：<ol><li>由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li><li>标记语言不是编程语言</li></ol></li></ul></li></ul></li></ul><a id="more"></a><ul><li><p>快速入门：</p><ul><li><p>语法：</p><ol><li><p>html文档后缀名 .html 或者 .htm</p></li><li><p>标签分为</p><ul><li>围堵标签：有开始标签和结束标签。如 <code>&lt;html&gt; &lt;/html&gt;</code></li><li>自闭和标签：开始标签和结束标签在一起。如 <code>&lt;br/&gt;</code></li></ul></li><li><p>标签可以嵌套：</p><p>需要正确嵌套，不能你中有我，我中有你</p><p>错误：<code>&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt;</code></p><p>正确：<code>&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</code></p></li><li><p>在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</p></li><li><p>html的标签不区分大小写，但是建议使用小写。</p></li></ol></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">FONT</span> <span class="attr">color</span>=<span class="string">'red'</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>表示语义上的强调（自动斜体）</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>表示内容上的强调（自动加粗）</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>i标签的内容会以斜体显示</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>b标签的内容会以加粗显示</span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span>内容以细小的字体显示</span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">cite</span>&gt;</span>引用（加书名号的）</span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span>行引用</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span>块儿引用</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span>上标</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span>下标</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span>删除线</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span>插入内容</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span>预格式</span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>代码块（一般和pre标签一起使用）</span><br></pre></td></tr></table></figure><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><ul><li>img标签：展示图片</li><li>属性：<ul><li>src：指定图片的位置</li></ul></li><li>代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--展示一张图片 img--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/pic1.jpg"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">alt</span>=<span class="string">"图片1"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    相对路径</span></span><br><span class="line"><span class="comment">    * 以.开头的路径</span></span><br><span class="line"><span class="comment">    * ./：代表当前目录  ./image/1.jpg</span></span><br><span class="line"><span class="comment">    * ../:代表上一级目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./image/pic1.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../image/pic2.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul><li>有序列表：<ul><li>ol</li><li>li </li></ul></li><li>无序列表：<ul><li>ul</li><li>li</li></ul></li><li>代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--有序列表 ol--&gt;</span></span><br><span class="line">早上起床干的事情</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"A"</span> <span class="attr">start</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>睁眼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>看手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿衣服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗漱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 无序列表  ul--&gt;</span></span><br><span class="line"></span><br><span class="line">早上起床干的事情</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>睁眼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>看手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿衣服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗漱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><ul><li><p>a标签：定义一个超链接</p><ul><li><p>属性：</p><ol><li><p>href：指定访问资源的URL(统一资源定位符)</p><p><em>href</em>是<span style="color:red">Hypertext Reference</span>的缩写。意思是指定超链接目标的URL。是css代码的一种。<em>href</em> 属性的值可以是任何有效文档的相对或绝对URL，包括片段标识符和JavaScript代码段。</p></li></ol></li></ul><ol start="2"><li>target：指定打开资源的方式<ul><li>_self:默认值，在当前页面打开<ul><li>_blank：在空白页面打开</li></ul></li></ul></li></ol><ul><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--超链接  a--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.skywalkerkkkk.cn"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.skywalkerkkkk.cn"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.skywalkerkkkk.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 也可以跳转至项目内的页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./anotherPage.html"</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:skywalkerkkkk@skywalkerkkkk.cn"</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.skywalkerkkkk.cn"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/pic1.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><ul><li>html5中为了提高程序的可读性，提供了一些标签。<ol><li><code>&lt;header&gt;：页眉</code></li><li><code>&lt;footer&gt;：页脚</code></li></ol></li></ul><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul><li>table：定义表格<ul><li>width：宽度</li><li>border：边框</li><li>cellpadding：定义内容和单元格的距离</li><li>cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条</li><li>bgcolor：背景色</li><li>align：对齐方式</li></ul></li><li>tr：定义行<ul><li>bgcolor：背景色</li><li>align：对齐方式</li></ul></li><li>td：定义单元格<ul><li>colspan：合并列</li><li>rowspan：合并行</li></ul></li><li>th：定义表头单元格</li><li><code>&lt;caption&gt;</code>：表格标题</li><li><code>&lt;thead&gt;</code>：表示表格的头部分</li><li><code>&lt;tbody&gt;</code>：表示表格的体部分</li><li><code>&lt;tfoot&gt;</code>：表示表格的脚部分</li></ul><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li>概念：用于采集用户输入的数据的。用于和服务器进行交互。</li><li>form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围</li><li>属性：<ul><li>action：指定提交数据的URL</li><li>method:指定提交方式</li><li>分类：一共7种，2种比较常用<ul><li>get：<ol><li>请求参数会在地址栏中显示。会封装到请求行中。</li><li>请求参数大小是有限制的。</li><li>不太安全。</li></ol></li><li>post：<ol><li>请求参数不会再地址栏中显示。会封装在请求体中。</li><li>请求参数的大小没有限制。</li><li>较为安全。</li></ol></li></ul></li></ul></li><li>表单项中的数据要想被提交：必须指定其name属性</li></ul><p><span style="color:blue; font-size:20px">表单项标签</span></p><ol><li><p>input：可以通过type属性值，改变元素展示的样式</p><ul><li><p>type属性：</p><ul><li><p>text：文本输入框，默认值</p></li><li><p>placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息</p></li><li><p>password：密码输入框</p></li><li><p>radio:单选框</p><ul><li>注意：<ol><li>要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。</li><li>一般会给每一个单选框提供value属性，指定其被选中后提交的值</li><li>checked属性，可以指定默认值</li></ol></li></ul></li><li><p>checkbox：复选框</p><ul><li>注意：<ol><li>一般会给每一个单选框提供value属性，指定其被选中后提交的值</li><li>checked属性，可以指定默认值</li></ol></li></ul></li><li><p>file：文件选择框</p></li><li><p>hidden：隐藏域，用于提交一些信息。</p></li><li><p>按钮：</p><ol><li>submit：提交按钮。可以提交表单</li><li>button：普通按钮</li><li>image：图片提交按钮<ul><li>src属性指定图片的路径</li></ul></li></ol></li></ul></li><li><p>label：指定输入项的文字描述信息</p><ul><li><p>注意：</p><p>label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。</p></li></ul></li><li><p>select: 下拉列表</p><ul><li>子元素：option，指定列表项</li></ul></li><li><p>textarea：文本域</p><ul><li><p>cols：指定列数，每一行有多少个字符</p></li><li><p>rows：默认多少行。</p></li></ul></li></ul></li></ol><h2 id="外部样式表格式"><a href="#外部样式表格式" class="headerlink" title="外部样式表格式"></a>外部样式表格式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"stylesheet"</span> <span class="attr">type</span> = <span class="string">"text/css"</span> <span class="attr">href</span> = <span class="string">"css文件路径"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul><li>概念：CSS（Cascading Style Sheet，层叠样式表）。将多个样式叠加作用在HTML元素上面，可以同时起效果，让页面更加好看。</li><li><p>好处：</p><ol><li>降低CSS样式和HTML元素的耦合度，将这两部分进行了分离</li></ol></li></ul><ol start="2"><li>功能更加强大</li></ol><ul><li>CSS和HTML的3种结合方式：<ol><li>内联样式</li><li>内部样式</li><li>外部样式</li></ol></li></ul><h2 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h2><ul><li>在HTML标签内使用style属性，在属性值内编写CSS代码。</li><li>缺点：<ol><li>CSS代码和HTML代码耦合在一起，并没有做到分离</li><li>作用范围太小，只能作用在该标签上</li></ol></li></ul><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h2><ul><li><p>在HTML页面的head标签内定义一个style标签在style标签体中定义CSS代码。</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">选择器｛</span></span><br><span class="line"><span class="undefined">属性名1:属性值1;</span></span><br><span class="line"><span class="undefined">    属性名2:属性值2;</span></span><br><span class="line"><span class="undefined">    属性名3:属性值3;</span></span><br><span class="line"><span class="undefined">｝</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>缺点：</p><ol><li>只能在本HTML页面内起效果，出了该页面无法起效果</li></ol></li></ul><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h2><ul><li><p>在外部定义一个CSS文件，在文件中编写CSS代码</p></li><li><p>在HTML页面中如何使用外部样式：</p><ol><li><p>使用link标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"stylesheet"</span> <span class="attr">type</span> = <span class="string">"text/css"</span> <span class="attr">href</span> = <span class="string">"css文件路径"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在style标签中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@import 关联css文件的路径;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><ul><li><p>格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名1:属性值1;</span><br><span class="line">    属性名2:属性值2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>选择器:筛选具有相似特征的元素</li><li>注意：每一对属性需要使用；隔开，最后一对属性可以不加分号</li></ul></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul><li>概念：筛选具有相似特征的元素</li><li>分类：<ul><li>基础选择器<ol><li>id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一<ul><li>语法：#id属性值{}</li></ul></li><li>元素选择器：选择具有相同标签名称的元素<ul><li>语法： 标签名称{}</li></ul></li><li>类选择器：选择具有相同的class属性值的元素。<ul><li>语法：.class属性值{}</li></ul></li><li><span style="color:red;font-size:25px">优先级关系：id选择器 &gt; 类选择器 &gt; 元素选择器</span></li></ol></li><li>扩展选择器<ol><li>选择所有元素<ul><li>语法： *{}</li></ul></li><li>并集选择器<ul><li>选择器1,选择器2{}</li></ul></li><li>后代选择器：筛选选择器1元素下的选择器2元素<ul><li>语法：  选择器1 选择器2{}</li></ul></li><li>子选择器：筛选选择器2的父元素选择器1<ul><li>语法：  选择器1 &gt; 选择器2{}</li></ul></li><li>属性选择器：选择元素名称，属性名=属性值的元素<ul><li>语法：  元素名称[属性名=”属性值”]{}</li></ul></li><li>元素状态选择器（伪类选择器）<ul><li>语法： 元素:状态{}</li><li>如：<code>&lt;a&gt;</code><ul><li>状态：<ol><li>link：初始化的状态</li><li>visited：被访问过的状态</li><li>active：正在访问状态</li><li>hover：鼠标悬浮状态</li></ol></li></ul></li></ul></li></ol></li></ul></li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol><li>字体、文本<ul><li>font-size：字体大小</li><li>color：文本颜色</li><li>text-align：对齐方式</li><li>line-height：行高 </li></ul></li><li>背景<ul><li>background</li></ul></li><li>边框<ul><li>border：设置边框，符合属性</li></ul></li><li>尺寸<ul><li>width：宽度</li><li>height：高度</li></ul></li><li>盒子模型：控制布局<ul><li>margin：外边距</li><li>padding：内边距<ul><li>默认情况下内边距会影响整个盒子的大小</li><li>box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</li></ul></li><li>float：浮动<ul><li>left</li><li>right</li></ul></li></ul></li></ol><h1 id="案例：注册页面"><a href="#案例：注册页面" class="headerlink" title="案例：注册页面"></a>案例：注册页面</h1><p><br></p><p><span style="color:red;font-size:25px">html页面代码：</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../../css/register.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_layout"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>新用户注册<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>USER REGISTER<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_middle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"请输入真实姓名"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tel"</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">id</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的手机号"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span>男</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span>女</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"birthday"</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">id</span>=<span class="string">"birthday"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"left_side"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"verify_code"</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"right_side"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"img"</span> <span class="attr">id</span>=<span class="string">"verify_code"</span> <span class="attr">name</span>=<span class="string">"verify_code"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../img/verify_code.jpg"</span> <span class="attr">id</span>=<span class="string">"img_check"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">id</span>=<span class="string">"sub"</span> <span class="attr">name</span>=<span class="string">"sub"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rg_right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>已有账号？<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><p><span style="color:red;font-size:25px">css样式表代码：</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"../img/register_bg.png"</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_layout</span> &#123;</span><br><span class="line">    <span class="comment">/*让div水平居中*/</span></span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">650px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">8px</span> solid <span class="built_in">rgb</span>(238, 238, 238);</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_left</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(255, 225, 128);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_left</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(168, 172, 191);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left_side</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(185, 185, 185);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right_side</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#username</span>, <span class="selector-id">#password</span>, <span class="selector-id">#email</span>, <span class="selector-id">#name</span>, <span class="selector-id">#tel</span>, <span class="selector-id">#birthday</span>, <span class="selector-id">#verify_code</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> <span class="built_in">rgb</span>(221, 221, 221) solid;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">270px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#verify_code</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#img_check</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sub</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(255, 222, 101);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_middle</span> &#123;</span><br><span class="line">    <span class="comment">/*border: 1px solid red;*/</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">48%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_right</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(253, 185, 178);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rg_right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:red;font-size:25px">效果图：</span></p><p><img src="..\images\注册_页面.jpg" alt="注册页面"></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -HTML -CSS -H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/Java/JavaWeb/"/>
      <url>/Java/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="ServletResoponse-设置响应格式"><a href="#ServletResoponse-设置响应格式" class="headerlink" title="ServletResoponse 设置响应格式"></a>ServletResoponse 设置响应格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletResponse response = <span class="keyword">new</span> ServletResponse();</span><br><span class="line">response.setContentType(<span class="string">"application/msword"</span>);<span class="comment">//设置响应类型为word文档。</span></span><br><span class="line"><span class="comment">//具体可以在tomcat/config/web.xml中查找需要格式对应的值</span></span><br></pre></td></tr></table></figure><hr><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="JSP运行原理"><a href="#JSP运行原理" class="headerlink" title="JSP运行原理"></a>JSP运行原理</h2><blockquote><ul><li>JSP是简Servlet编写的一种技术，他将Java代码和HTML语句混合在同一个文件中编写。只对网页中的要动态产生的内容才用Java代码来编写，而对固定不变的静态内容才用普通静态HTML页面的方式编写。</li><li>JSP继承了HttpJspBase类，而HttpJspBase又继承了HttpServlet，即jsp间接继承了HttpServlet，即JSP本质上就是一个Servlet。</li></ul></blockquote><hr><h2 id="JSP八大内置对象（实际上9个）"><a href="#JSP八大内置对象（实际上9个）" class="headerlink" title="JSP八大内置对象（实际上9个）"></a>JSP八大内置对象（实际上9个）</h2><table><thead><tr><th style="text-align:center">类名</th><th style="text-align:center">对象实例名（可直接调用）</th></tr></thead><tbody><tr><td style="text-align:center">HttpServletRequest</td><td style="text-align:center">request</td></tr><tr><td style="text-align:center">HttpServletResoponse</td><td style="text-align:center">response</td></tr><tr><td style="text-align:center">PageContext</td><td style="text-align:center">pageContext</td></tr><tr><td style="text-align:center">HttpSession</td><td style="text-align:center">session</td></tr><tr><td style="text-align:center">ServletContext</td><td style="text-align:center">application</td></tr><tr><td style="text-align:center">ServletConfig</td><td style="text-align:center">config</td></tr><tr><td style="text-align:center">JspWriter</td><td style="text-align:center">out</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">page</td></tr><tr><td style="text-align:center"><strong><em>Exception</em></strong></td><td style="text-align:center"><strong><em>exception</em></strong></td></tr></tbody></table><a id="more"></a><blockquote><ul><li><font color="red">① request：HttpServletRequest的一个对象。</font> </li><li>② response：HttpServletResponse的一个对象（在JSP页面中几乎不会调用response的任何方法）。 </li><li><font color="red">③ pageContext：页面的上下文，是PageContext的一个对象。可以从该对象中获取到其他8个隐含对象。亦可以从中获取到当前页面的其他信息。（学习自定义标签时使用他。在JSP页面上很少直接使用他。）</font> </li><li><font color="red"> ④ session：代表浏览器和服务器的一次会话，是HttpSession的一个对象。</font> </li><li><font color="red">⑤ application：代表当前Web应用。是ServletContext的一个对象。（可以获取初始化参数等。）</font> </li><li>⑥ config：当前JSP对应的Servlet的ServletConfig对象。（开发时几乎不使用。若需要访问当前JSP配置的初始化参数，需要通过映射的地址才可以。） </li><li><font color="red">⑦ out：JspWriter对象。调用out.println()可以直接把字符串打印到浏览器上。（在两次out.println()时，中间不会换行，需要添加HTML的换行标签&lt;br>。）</font>  </li><li>⑧ page：指向当前JSP对应的Servlet对象的引用，但为Object类型，只能调用Object类的方法（几乎不使用。） </li><li><p>⑨ exception：一定的条件下才可以用。（只有主动声明了isErrorPage=”true”的时候，才可以使用。） </p><blockquote><ul><li><strong>标红均为开发时常用对象。</strong><blockquote><ul><li>pageContext，request，session，application<strong>对属性的作用域范围从小到大</strong>。</li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><hr><h2 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h2><p>​    JSP表达式（expression）提供了将一个java变量或表达式的计算结果输出到客户端的简化方式，他将要输出的变量或表达式直接封装在&lt;%= 和 %&gt;中。</p><blockquote><ul><li>JSP注释的格式：&lt;%– JSP注释 –%&gt;</li><li>HTML注释的格式：&lt;!– HTML注释 –></li></ul></blockquote><p><strong><em>区别</em> :     </strong></p><p>​         <strong>JSP注释可以阻止Java代码的执行，而HTML注释surround with &lt;% Java代码 %&gt;时，不能阻止Java代码的执行。</strong></p><hr><h2 id="域对象的属性操作"><a href="#域对象的属性操作" class="headerlink" title="域对象的属性操作"></a>域对象的属性操作</h2><blockquote><ul><li><p>①    和属性相关的方法：</p><blockquote><ul><li>Object getAttribute(String name)：获取指定的属性</li><li>Enumeration getAttributeNames()：获取所有的属性的名字组成的Enumeration对象</li><li>void removeAttribute(String name)：移除指定的属性</li><li>void setAttribute(String name, Object obj)：设置属性</li></ul></blockquote><p>   ②    pageContext，request，session，application对象都有这些方法。这四个对象也成为域对象。</p><p>   ③    作用范围</p><blockquote><ul><li>pageContext：属性的作用范围仅限于当前JSP页面。（在Servlet中无法得到pageContext对象。）</li><li>request：属性的作用范围仅限于同一个请求。</li><li>session：属性的作用范围限于一次会话。（会话：浏览器打开直到关闭称之为一次会话。（会话在此期间不失效。））</li><li>application：属性的作用范围限于当前Web应用。是范围最大的属性作用范围，只要在一处设置属性，在其他各处的JSP或Servlet中都可以获取到。</li></ul></blockquote></li></ul></blockquote><hr><h2 id="请求的转发和重定向"><a href="#请求的转发和重定向" class="headerlink" title="请求的转发和重定向"></a>请求的转发和重定向</h2><blockquote><ul><li><p>①    调用HttpServletRequest的getRequestDispatcher(String path)方法获取RequestDispatcher对象。调用方法时，需要传入要转发的地址。</p><p>   <strong>②    调用 HttpServletRequest的 forward（request，response）<em>进行请求的转发</em>。</strong></p><p>   <strong>③    调用sendRedirect(String path) <em>进行请求的重定向</em>。</strong></p><p>   ④    转发与重定向的区别：</p><blockquote><ul><li><p><strong>本质区别：请求的转发只发出了 <em>一次</em>  请求，而重定向则发出了 <em>两次</em>  请求。</strong>    </p></li><li><p><strong>具体：</strong></p><ul><li><p>请求的转发：地址栏是初次发出请求的地址。</p><p>请求的重定向：地址栏不再是初次发出的请求地址，地址栏为最后响应的那个地址。</p></li><li><p>请求的转发：在最终的Servlet中，request对象和中转的那个request<strong>是</strong>同一个对象。</p><p>请求的重定向：在最终的Servlet中，request对象和中转的那个request<strong>不是</strong>同一个对象。</p></li><li><p>请求的转发：只能转发到当前Web应用的资源（内部资源）。</p><p>请求的重定向：可以重定向到任何资源。</p></li><li><p>请求的转发：“ / ”  代表的是当前Web应用（localhost:port/WebApps）的根目录。</p><p>请求的重定向：“ / ” 代表的是当前Web站点（localhost:port）的根目录。</p></li></ul></li></ul></blockquote></li></ul></blockquote><hr><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><blockquote><ul><li><p>①include</p><blockquote><ul><li>用于通知JSP引擎在翻译当前JSP页面时将其他文件中的内容合并进当前JSP页面转换成的Servlet源文件中，这种在源文件级别进行引入的方式称之为静态引入，当前JSP页面与静态引入的页面紧密结合为一个Servlet。</li><li>file属性的设置值必须使用相对路径。</li><li>如果以“ / ”开头，表示相对于当前Web应用程序的根目录（<strong>注意不是站点根目录</strong>），否则，表示相对于当前文件。</li></ul></blockquote></li><li><p>②page</p><blockquote><ul><li><p><font color="red"><1></1></font>page指令用于定义JSP页面的各种属性，无论page指令出现在JSP页面中的什么地方，它作用的都是整个JSP页面，为了保持程序的可读性和遵循良好的变成习惯，page指令最好是放在整个JSP页面的起始位置。</p></li><li><p><font color="red"><2></2></font>page指令常用的属性：</p><blockquote><ul><li><p>import属性：指定当前JSP页面对应的Servlet需要导入的类。&lt;%@page import=”全类名”%&gt;</p></li><li><p>session属性：取值为true或false，指定当前页面的session隐藏变量是否可用，也可以说访问当前页面时，是否一定要生成HttpSession对象。</p></li><li><p>errorPage和isErrorPage：前者表示指定若当前页面出现错误的实际响应页面是什么，其中“ / ” 表示的是当前Web应用的根目录。后者表示指定当前页面是否为错误处理页面，可以说明当前页面是否可以使用exception隐藏内置对象。</p><ul><li><strong>需要注意的是：若指定isErrorPage=”true”，并使用exception的方法了，一般不建议能够直接访问该页面。</strong></li></ul></li><li><p>contentType：指定当前JSP页面的响应类型。实际调用的是response.setContentType(“text/html;charset=UTF-8”);通常情况下，对于JSP页面而言其取值均为 text/html; charset=UTF-8  </p></li><li><p>pageEncoding：指定当前JSP页面的字符编码。通常情况下该值和contentType中的charset一致。</p></li><li><p>isELIgnored：指定当前JSP页面是否可以使用EL表达式。通常取值为true。</p></li><li><p>如何使客户不能直接访问一个页面呢？</p><p>1) 对于Tomcat服务器而言，WEB-INF下的文件是不能通过在浏览器中直接输入来访问的。但通过请求的转发是可以访问的！<br>2) 还可以在web.xml文件中配置错误页面。</p></li></ul></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 方式<span class="number">1</span>.指定出错的代码，<span class="number">404</span>没有指定资源，<span class="number">500</span>内部错误。 --&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line"> &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line"> &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt; &lt;!-- 指定响应页面的位置 --&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 方式<span class="number">2</span>.指定异常的类型 --&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">&lt;exception-type&gt;java.lang.ArithmeticException&lt;/exception-type&gt;</span><br><span class="line">       &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt;  &lt;!-- 指定响应页面的位置 --&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>③taglib</li></ul></blockquote><h2 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h2><blockquote><ul><li><p>jsp:include标签：</p><blockquote><ul><li><p><code>&lt;jsp:include page = &quot;path&quot;&gt; &lt;/jsp:include&gt;</code></p></li><li><p>动态引入：并不是像include指令生成一个Servlet源文件，而是生成两个Servlet源文件，然后通过一个方法的方式把目标页面包含进来。</p><p><code>org.apache.jasper.runtime.JspRuntimeLibrary.include(request,response,&quot;path&quot;,out,false);</code>    </p></li></ul></blockquote></li><li><p>include指令和jsp:include标签：</p><blockquote><ul><li>是在当前JSP页面的执行期间插入被引入资源的输出内容。</li><li>被动态引入的资源必须是一个能独立被Web容器调用和执行的资源。</li><li>include指令只能引入遵循JSP格式的文件，被引入文件与当前JSP文件共同合被翻译成一个Servlet源文件。</li></ul></blockquote></li><li><p>jsp:foward标签：</p><blockquote><ul><li><p><code>&lt;jsp:forward page = &quot;path&quot;&gt;&lt;/jsp:forward&gt;</code></p><p>相当于<code>request.getRequestDispatcher(&quot;path&quot;).forward(request,response);</code></p></li><li><p>但使用jsp:forward可以使用jsp:param子标签向path传入一些参数，同样jsp:include也可以使用jsp:param子标签。</p></li></ul></blockquote></li></ul></blockquote><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><font color="blue" size="5">编码格式 = 解码格式即可解决乱码问题。</font><h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p>MVC即Model-View-Controller。模型-视图-控制器。</p><h2 id="模型（Model）"><a href="#模型（Model）" class="headerlink" title="模型（Model）"></a>模型（Model）</h2><ul><li>模型是应用程序的主体部分。模型表示业务数据和业务逻辑。</li><li>一个模型能为多个视图提供数据。</li><li>由于应用于模型的代码只需要写一次就可以被多个视图重用，所以提高了代码的可重用性。</li></ul><h2 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h2><ul><li>视图是用户看到并与之交互的界面，作用如下：<ul><li>视图向用户显示相关的数据。</li><li>接受用户的输入。</li><li>不进行任何实际的业务处理。</li></ul></li></ul><h2 id="控制器（Controller）"><a href="#控制器（Controller）" class="headerlink" title="控制器（Controller）"></a>控制器（Controller）</h2><ul><li>控制器接受用户的输入并调用模型和视图去完成用户的需求。</li><li>控制器接受请求并决定调用哪个模型组建去处理请求，然后决定调用哪个视图来显示模型处理返回的数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -JavaWeb -JSP -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/%E7%94%9F%E6%B4%BB/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/%E7%94%9F%E6%B4%BB/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>Hello Everyone！这是我的第一篇文章。</p><p>在老铁的帮助下，我慢慢开始摸索代码世界……</p><p>自己加油吧。</p><p>Keep Going！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
